
TaskSchedulerNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08001894  08001894  00011894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001964  08001964  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001964  08001964  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001964  08001964  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800196c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000064  080019d0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080019d0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000180b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000702  00000000  00000000  00021899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00021fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  000221d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000203f  00000000  00000000  000223b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022db  00000000  00000000  000243f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b96  00000000  00000000  000266d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dec  00000000  00000000  000302b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800187c 	.word	0x0800187c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	0800187c 	.word	0x0800187c

080001d8 <modeRegisterAddress>:
		(gpioClockEnable_t*) RCC_AHB1ENR;
volatile pinMode_t *pGPIOx_MODE;
volatile outputData_t *pGPIOx_OUT;

uint32_t modeRegisterAddress(port_e port)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	if (port == A)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d107      	bne.n	80001f8 <modeRegisterAddress+0x20>
	{
		addr = GPIOA_MODE_ADDR;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <modeRegisterAddress+0x98>)
 80001ea:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOA_EN = 1;
 80001ec:	4a21      	ldr	r2, [pc, #132]	; (8000274 <modeRegisterAddress+0x9c>)
 80001ee:	6813      	ldr	r3, [r2, #0]
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6013      	str	r3, [r2, #0]
 80001f6:	e035      	b.n	8000264 <modeRegisterAddress+0x8c>
	}
	else if (port == B)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d107      	bne.n	800020e <modeRegisterAddress+0x36>
	{
		addr = GPIOB_MODE_ADDR;
 80001fe:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <modeRegisterAddress+0xa0>)
 8000200:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOB_EN = 1;
 8000202:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <modeRegisterAddress+0x9c>)
 8000204:	6813      	ldr	r3, [r2, #0]
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	e02a      	b.n	8000264 <modeRegisterAddress+0x8c>
	}
	else if (port == C)
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d107      	bne.n	8000224 <modeRegisterAddress+0x4c>
	{
		addr = GPIOC_MODE_ADDR;
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <modeRegisterAddress+0xa4>)
 8000216:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOC_EN = 1;
 8000218:	4a16      	ldr	r2, [pc, #88]	; (8000274 <modeRegisterAddress+0x9c>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e01f      	b.n	8000264 <modeRegisterAddress+0x8c>
	}
	else if (port == D)
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d107      	bne.n	800023a <modeRegisterAddress+0x62>
	{
		addr = GPIOD_MODE_ADDR;
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <modeRegisterAddress+0xa8>)
 800022c:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOD_EN = 1;
 800022e:	4a11      	ldr	r2, [pc, #68]	; (8000274 <modeRegisterAddress+0x9c>)
 8000230:	6813      	ldr	r3, [r2, #0]
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	e014      	b.n	8000264 <modeRegisterAddress+0x8c>
	}
	else if (port == E)
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2b04      	cmp	r3, #4
 800023e:	d107      	bne.n	8000250 <modeRegisterAddress+0x78>
	{
		addr = GPIOE_MODE_ADDR;
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <modeRegisterAddress+0xac>)
 8000242:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOE_EN = 1;
 8000244:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <modeRegisterAddress+0x9c>)
 8000246:	6813      	ldr	r3, [r2, #0]
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	e009      	b.n	8000264 <modeRegisterAddress+0x8c>
	}
	else if (port == H)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2b05      	cmp	r3, #5
 8000254:	d106      	bne.n	8000264 <modeRegisterAddress+0x8c>
	{
		addr = GPIOH_MODE_ADDR;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <modeRegisterAddress+0xb0>)
 8000258:	60fb      	str	r3, [r7, #12]
		pRCC_AHB1ENR->GPIOH_EN = 1;
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <modeRegisterAddress+0x9c>)
 800025c:	6813      	ldr	r3, [r2, #0]
 800025e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000262:	6013      	str	r3, [r2, #0]
	}
	return addr;
 8000264:	68fb      	ldr	r3, [r7, #12]

}
 8000266:	4618      	mov	r0, r3
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40020000 	.word	0x40020000
 8000274:	40023830 	.word	0x40023830
 8000278:	40020400 	.word	0x40020400
 800027c:	40020800 	.word	0x40020800
 8000280:	40020c00 	.word	0x40020c00
 8000284:	40021000 	.word	0x40021000
 8000288:	40021c00 	.word	0x40021c00

0800028c <outputRegisterAddress>:
uint32_t outputRegisterAddress(port_e port)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	uint32_t addr;
	if (port == A)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <outputRegisterAddress+0x16>
		addr = GPIOA_OUT_ADDR;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <outputRegisterAddress+0x5c>)
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e01c      	b.n	80002dc <outputRegisterAddress+0x50>
	else if (port == B)
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d102      	bne.n	80002ae <outputRegisterAddress+0x22>
		addr = GPIOB_OUT_ADDR;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <outputRegisterAddress+0x60>)
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	e016      	b.n	80002dc <outputRegisterAddress+0x50>
	else if (port == C)
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d102      	bne.n	80002ba <outputRegisterAddress+0x2e>
		addr = GPIOC_OUT_ADDR;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <outputRegisterAddress+0x64>)
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e010      	b.n	80002dc <outputRegisterAddress+0x50>
	else if (port == D)
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	2b03      	cmp	r3, #3
 80002be:	d102      	bne.n	80002c6 <outputRegisterAddress+0x3a>
		addr = GPIOD_OUT_ADDR;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <outputRegisterAddress+0x68>)
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	e00a      	b.n	80002dc <outputRegisterAddress+0x50>
	else if (port == E)
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d102      	bne.n	80002d2 <outputRegisterAddress+0x46>
		addr = GPIOE_OUT_ADDR;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <outputRegisterAddress+0x6c>)
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e004      	b.n	80002dc <outputRegisterAddress+0x50>
	else if (port == H)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b05      	cmp	r3, #5
 80002d6:	d101      	bne.n	80002dc <outputRegisterAddress+0x50>
		addr = GPIOH_OUT_ADDR;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <outputRegisterAddress+0x70>)
 80002da:	60fb      	str	r3, [r7, #12]
	return addr;
 80002dc:	68fb      	ldr	r3, [r7, #12]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3714      	adds	r7, #20
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40020014 	.word	0x40020014
 80002ec:	40020414 	.word	0x40020414
 80002f0:	40020814 	.word	0x40020814
 80002f4:	40020c14 	.word	0x40020c14
 80002f8:	40021014 	.word	0x40021014
 80002fc:	40021c14 	.word	0x40021c14

08000300 <pinMode>:
void pinMode(pin_e pin, port_e port, mode_e mode)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	460b      	mov	r3, r1
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	4613      	mov	r3, r2
 8000310:	717b      	strb	r3, [r7, #5]

	pGPIOx_MODE = (pinMode_t*) modeRegisterAddress(port);
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5f 	bl	80001d8 <modeRegisterAddress>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b72      	ldr	r3, [pc, #456]	; (80004e8 <pinMode+0x1e8>)
 8000320:	601a      	str	r2, [r3, #0]
	if (pin == 0)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10a      	bne.n	800033e <pinMode+0x3e>
	{
		pGPIOx_MODE->pin0 = mode;
 8000328:	4b6f      	ldr	r3, [pc, #444]	; (80004e8 <pinMode+0x1e8>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	797b      	ldrb	r3, [r7, #5]
 800032e:	f003 0303 	and.w	r3, r3, #3
 8000332:	b2d9      	uxtb	r1, r3
 8000334:	6813      	ldr	r3, [r2, #0]
 8000336:	f361 0301 	bfi	r3, r1, #0, #2
 800033a:	6013      	str	r3, [r2, #0]
	else if (pin == 15)
	{

		pGPIOx_MODE->pin15 = mode;
	}
}
 800033c:	e0d0      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 1)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d10a      	bne.n	800035a <pinMode+0x5a>
		pGPIOx_MODE->pin1 = mode;
 8000344:	4b68      	ldr	r3, [pc, #416]	; (80004e8 <pinMode+0x1e8>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	797b      	ldrb	r3, [r7, #5]
 800034a:	f003 0303 	and.w	r3, r3, #3
 800034e:	b2d9      	uxtb	r1, r3
 8000350:	6813      	ldr	r3, [r2, #0]
 8000352:	f361 0383 	bfi	r3, r1, #2, #2
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	e0c2      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 2)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d10a      	bne.n	8000376 <pinMode+0x76>
		pGPIOx_MODE->pin2 = mode;
 8000360:	4b61      	ldr	r3, [pc, #388]	; (80004e8 <pinMode+0x1e8>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	797b      	ldrb	r3, [r7, #5]
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	b2d9      	uxtb	r1, r3
 800036c:	6813      	ldr	r3, [r2, #0]
 800036e:	f361 1305 	bfi	r3, r1, #4, #2
 8000372:	6013      	str	r3, [r2, #0]
}
 8000374:	e0b4      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 3)
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d10a      	bne.n	8000392 <pinMode+0x92>
		pGPIOx_MODE->pin3 = mode;
 800037c:	4b5a      	ldr	r3, [pc, #360]	; (80004e8 <pinMode+0x1e8>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	797b      	ldrb	r3, [r7, #5]
 8000382:	f003 0303 	and.w	r3, r3, #3
 8000386:	b2d9      	uxtb	r1, r3
 8000388:	6813      	ldr	r3, [r2, #0]
 800038a:	f361 1387 	bfi	r3, r1, #6, #2
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	e0a6      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 4)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b04      	cmp	r3, #4
 8000396:	d10a      	bne.n	80003ae <pinMode+0xae>
		pGPIOx_MODE->pin4 = mode;
 8000398:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <pinMode+0x1e8>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	f003 0303 	and.w	r3, r3, #3
 80003a2:	b2d9      	uxtb	r1, r3
 80003a4:	6813      	ldr	r3, [r2, #0]
 80003a6:	f361 2309 	bfi	r3, r1, #8, #2
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	e098      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 5)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b05      	cmp	r3, #5
 80003b2:	d10a      	bne.n	80003ca <pinMode+0xca>
		pGPIOx_MODE->pin5 = mode;
 80003b4:	4b4c      	ldr	r3, [pc, #304]	; (80004e8 <pinMode+0x1e8>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	797b      	ldrb	r3, [r7, #5]
 80003ba:	f003 0303 	and.w	r3, r3, #3
 80003be:	b2d9      	uxtb	r1, r3
 80003c0:	6813      	ldr	r3, [r2, #0]
 80003c2:	f361 238b 	bfi	r3, r1, #10, #2
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	e08a      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 6)
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d10a      	bne.n	80003e6 <pinMode+0xe6>
		pGPIOx_MODE->pin6 = mode;
 80003d0:	4b45      	ldr	r3, [pc, #276]	; (80004e8 <pinMode+0x1e8>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	797b      	ldrb	r3, [r7, #5]
 80003d6:	f003 0303 	and.w	r3, r3, #3
 80003da:	b2d9      	uxtb	r1, r3
 80003dc:	6813      	ldr	r3, [r2, #0]
 80003de:	f361 330d 	bfi	r3, r1, #12, #2
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	e07c      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 7)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d10a      	bne.n	8000402 <pinMode+0x102>
		pGPIOx_MODE->pin7 = mode;
 80003ec:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <pinMode+0x1e8>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	797b      	ldrb	r3, [r7, #5]
 80003f2:	f003 0303 	and.w	r3, r3, #3
 80003f6:	b2d9      	uxtb	r1, r3
 80003f8:	6813      	ldr	r3, [r2, #0]
 80003fa:	f361 338f 	bfi	r3, r1, #14, #2
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	e06e      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 8)
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b08      	cmp	r3, #8
 8000406:	d10a      	bne.n	800041e <pinMode+0x11e>
		pGPIOx_MODE->pin8 = mode;
 8000408:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <pinMode+0x1e8>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	f003 0303 	and.w	r3, r3, #3
 8000412:	b2d9      	uxtb	r1, r3
 8000414:	6813      	ldr	r3, [r2, #0]
 8000416:	f361 4311 	bfi	r3, r1, #16, #2
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	e060      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 9)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b09      	cmp	r3, #9
 8000422:	d10a      	bne.n	800043a <pinMode+0x13a>
		pGPIOx_MODE->pin9 = mode;
 8000424:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <pinMode+0x1e8>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	797b      	ldrb	r3, [r7, #5]
 800042a:	f003 0303 	and.w	r3, r3, #3
 800042e:	b2d9      	uxtb	r1, r3
 8000430:	6813      	ldr	r3, [r2, #0]
 8000432:	f361 4393 	bfi	r3, r1, #18, #2
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	e052      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 10)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b0a      	cmp	r3, #10
 800043e:	d10a      	bne.n	8000456 <pinMode+0x156>
		pGPIOx_MODE->pin10 = mode;
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <pinMode+0x1e8>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	797b      	ldrb	r3, [r7, #5]
 8000446:	f003 0303 	and.w	r3, r3, #3
 800044a:	b2d9      	uxtb	r1, r3
 800044c:	6813      	ldr	r3, [r2, #0]
 800044e:	f361 5315 	bfi	r3, r1, #20, #2
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	e044      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 11)
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b0b      	cmp	r3, #11
 800045a:	d10a      	bne.n	8000472 <pinMode+0x172>
		pGPIOx_MODE->pin11 = mode;
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <pinMode+0x1e8>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	797b      	ldrb	r3, [r7, #5]
 8000462:	f003 0303 	and.w	r3, r3, #3
 8000466:	b2d9      	uxtb	r1, r3
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	f361 5397 	bfi	r3, r1, #22, #2
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	e036      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 12)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b0c      	cmp	r3, #12
 8000476:	d10a      	bne.n	800048e <pinMode+0x18e>
		pGPIOx_MODE->pin12 = mode;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <pinMode+0x1e8>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	797b      	ldrb	r3, [r7, #5]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	b2d9      	uxtb	r1, r3
 8000484:	6813      	ldr	r3, [r2, #0]
 8000486:	f361 6319 	bfi	r3, r1, #24, #2
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	e028      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 13)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b0d      	cmp	r3, #13
 8000492:	d10a      	bne.n	80004aa <pinMode+0x1aa>
		pGPIOx_MODE->pin13 = mode;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <pinMode+0x1e8>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	f003 0303 	and.w	r3, r3, #3
 800049e:	b2d9      	uxtb	r1, r3
 80004a0:	6813      	ldr	r3, [r2, #0]
 80004a2:	f361 639b 	bfi	r3, r1, #26, #2
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	e01a      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 14)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b0e      	cmp	r3, #14
 80004ae:	d10a      	bne.n	80004c6 <pinMode+0x1c6>
		pGPIOx_MODE->pin14 = mode;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <pinMode+0x1e8>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	797b      	ldrb	r3, [r7, #5]
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	b2d9      	uxtb	r1, r3
 80004bc:	6813      	ldr	r3, [r2, #0]
 80004be:	f361 731d 	bfi	r3, r1, #28, #2
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	e00c      	b.n	80004e0 <pinMode+0x1e0>
	else if (pin == 15)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d109      	bne.n	80004e0 <pinMode+0x1e0>
		pGPIOx_MODE->pin15 = mode;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <pinMode+0x1e8>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	797b      	ldrb	r3, [r7, #5]
 80004d2:	f003 0303 	and.w	r3, r3, #3
 80004d6:	b2d9      	uxtb	r1, r3
 80004d8:	6813      	ldr	r3, [r2, #0]
 80004da:	f361 739f 	bfi	r3, r1, #30, #2
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000080 	.word	0x20000080

080004ec <pinOutput>:

void pinOutput(pin_e pin, port_e port, out_e out)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	460b      	mov	r3, r1
 80004f8:	71bb      	strb	r3, [r7, #6]
 80004fa:	4613      	mov	r3, r2
 80004fc:	717b      	strb	r3, [r7, #5]
	pGPIOx_OUT = (outputData_t*) outputRegisterAddress(port);
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fec3 	bl	800028c <outputRegisterAddress>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b72      	ldr	r3, [pc, #456]	; (80006d4 <pinOutput+0x1e8>)
 800050c:	601a      	str	r2, [r3, #0]
	if (pin == 0)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <pinOutput+0x3e>
	{
		pGPIOx_OUT->pin0 = out;
 8000514:	4b6f      	ldr	r3, [pc, #444]	; (80006d4 <pinOutput+0x1e8>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	797b      	ldrb	r3, [r7, #5]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	b2d9      	uxtb	r1, r3
 8000520:	6813      	ldr	r3, [r2, #0]
 8000522:	f361 0300 	bfi	r3, r1, #0, #1
 8000526:	6013      	str	r3, [r2, #0]
	else if (pin == 15)
	{

		pGPIOx_OUT->pin15 = out;
	}
}
 8000528:	e0d0      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 1)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10a      	bne.n	8000546 <pinOutput+0x5a>
		pGPIOx_OUT->pin1 = out;
 8000530:	4b68      	ldr	r3, [pc, #416]	; (80006d4 <pinOutput+0x1e8>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	797b      	ldrb	r3, [r7, #5]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	b2d9      	uxtb	r1, r3
 800053c:	6813      	ldr	r3, [r2, #0]
 800053e:	f361 0341 	bfi	r3, r1, #1, #1
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	e0c2      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 2)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b02      	cmp	r3, #2
 800054a:	d10a      	bne.n	8000562 <pinOutput+0x76>
		pGPIOx_OUT->pin2 = out;
 800054c:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <pinOutput+0x1e8>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	797b      	ldrb	r3, [r7, #5]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2d9      	uxtb	r1, r3
 8000558:	6813      	ldr	r3, [r2, #0]
 800055a:	f361 0382 	bfi	r3, r1, #2, #1
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	e0b4      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 3)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b03      	cmp	r3, #3
 8000566:	d10a      	bne.n	800057e <pinOutput+0x92>
		pGPIOx_OUT->pin3 = out;
 8000568:	4b5a      	ldr	r3, [pc, #360]	; (80006d4 <pinOutput+0x1e8>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	797b      	ldrb	r3, [r7, #5]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	b2d9      	uxtb	r1, r3
 8000574:	6813      	ldr	r3, [r2, #0]
 8000576:	f361 03c3 	bfi	r3, r1, #3, #1
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	e0a6      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 4)
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d10a      	bne.n	800059a <pinOutput+0xae>
		pGPIOx_OUT->pin4 = out;
 8000584:	4b53      	ldr	r3, [pc, #332]	; (80006d4 <pinOutput+0x1e8>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2d9      	uxtb	r1, r3
 8000590:	6813      	ldr	r3, [r2, #0]
 8000592:	f361 1304 	bfi	r3, r1, #4, #1
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	e098      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 5)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b05      	cmp	r3, #5
 800059e:	d10a      	bne.n	80005b6 <pinOutput+0xca>
		pGPIOx_OUT->pin5 = out;
 80005a0:	4b4c      	ldr	r3, [pc, #304]	; (80006d4 <pinOutput+0x1e8>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2d9      	uxtb	r1, r3
 80005ac:	6813      	ldr	r3, [r2, #0]
 80005ae:	f361 1345 	bfi	r3, r1, #5, #1
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	e08a      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 6)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d10a      	bne.n	80005d2 <pinOutput+0xe6>
		pGPIOx_OUT->pin6 = out;
 80005bc:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <pinOutput+0x1e8>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	797b      	ldrb	r3, [r7, #5]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2d9      	uxtb	r1, r3
 80005c8:	6813      	ldr	r3, [r2, #0]
 80005ca:	f361 1386 	bfi	r3, r1, #6, #1
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	e07c      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 7)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d10a      	bne.n	80005ee <pinOutput+0x102>
		pGPIOx_OUT->pin7 = out;
 80005d8:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <pinOutput+0x1e8>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	b2d9      	uxtb	r1, r3
 80005e4:	6813      	ldr	r3, [r2, #0]
 80005e6:	f361 13c7 	bfi	r3, r1, #7, #1
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	e06e      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 8)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d10a      	bne.n	800060a <pinOutput+0x11e>
		pGPIOx_OUT->pin8 = out;
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <pinOutput+0x1e8>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	b2d9      	uxtb	r1, r3
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	f361 2308 	bfi	r3, r1, #8, #1
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	e060      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 9)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d10a      	bne.n	8000626 <pinOutput+0x13a>
		pGPIOx_OUT->pin9 = out;
 8000610:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <pinOutput+0x1e8>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	797b      	ldrb	r3, [r7, #5]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2d9      	uxtb	r1, r3
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f361 2349 	bfi	r3, r1, #9, #1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	e052      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 10)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b0a      	cmp	r3, #10
 800062a:	d10a      	bne.n	8000642 <pinOutput+0x156>
		pGPIOx_OUT->pin10 = out;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <pinOutput+0x1e8>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2d9      	uxtb	r1, r3
 8000638:	6813      	ldr	r3, [r2, #0]
 800063a:	f361 238a 	bfi	r3, r1, #10, #1
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	e044      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 11)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b0b      	cmp	r3, #11
 8000646:	d10a      	bne.n	800065e <pinOutput+0x172>
		pGPIOx_OUT->pin11 = out;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <pinOutput+0x1e8>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2d9      	uxtb	r1, r3
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f361 23cb 	bfi	r3, r1, #11, #1
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	e036      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 12)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b0c      	cmp	r3, #12
 8000662:	d10a      	bne.n	800067a <pinOutput+0x18e>
		pGPIOx_OUT->pin12 = out;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <pinOutput+0x1e8>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	b2d9      	uxtb	r1, r3
 8000670:	6813      	ldr	r3, [r2, #0]
 8000672:	f361 330c 	bfi	r3, r1, #12, #1
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	e028      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 13)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b0d      	cmp	r3, #13
 800067e:	d10a      	bne.n	8000696 <pinOutput+0x1aa>
		pGPIOx_OUT->pin13 = out;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <pinOutput+0x1e8>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	797b      	ldrb	r3, [r7, #5]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	f361 334d 	bfi	r3, r1, #13, #1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	e01a      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 14)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b0e      	cmp	r3, #14
 800069a:	d10a      	bne.n	80006b2 <pinOutput+0x1c6>
		pGPIOx_OUT->pin14 = out;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <pinOutput+0x1e8>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	b2d9      	uxtb	r1, r3
 80006a8:	6813      	ldr	r3, [r2, #0]
 80006aa:	f361 338e 	bfi	r3, r1, #14, #1
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	e00c      	b.n	80006cc <pinOutput+0x1e0>
	else if (pin == 15)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d109      	bne.n	80006cc <pinOutput+0x1e0>
		pGPIOx_OUT->pin15 = out;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <pinOutput+0x1e8>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2d9      	uxtb	r1, r3
 80006c4:	6813      	ldr	r3, [r2, #0]
 80006c6:	f361 33cf 	bfi	r3, r1, #15, #1
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000084 	.word	0x20000084

080006d8 <led_init>:

task_t task[MAX_TASK];
uint8_t currentTask = 0;
uint32_t global_count = 0;
void led_init()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	pinMode(0, A, output);
 80006dc:	2201      	movs	r2, #1
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe0d 	bl	8000300 <pinMode>
//	pinOutput(0, A, high);
	pinMode(2, A, output);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2100      	movs	r1, #0
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff fe08 	bl	8000300 <pinMode>
//	pinOutput(2, A, high);
	pinMode(4, A, output);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2100      	movs	r1, #0
 80006f4:	2004      	movs	r0, #4
 80006f6:	f7ff fe03 	bl	8000300 <pinMode>
//	pinOutput(4, A, high);
	pinMode(13, C, output);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	200d      	movs	r0, #13
 8000700:	f7ff fdfe 	bl	8000300 <pinMode>
//	pinOutput(13, C, low);
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <main>:
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
#if 1
	led_init();
 800070c:	f7ff ffe4 	bl	80006d8 <led_init>
	enableAllFaultMonitoring();
 8000710:	f000 fb44 	bl	8000d9c <enableAllFaultMonitoring>
	scheduler_stack_init();
 8000714:	f000 f89c 	bl	8000850 <scheduler_stack_init>
	task_stack_init();
 8000718:	f000 f844 	bl	80007a4 <task_stack_init>
	dummy_stack_init();
 800071c:	f000 f8c2 	bl	80008a4 <dummy_stack_init>
	systick_init();
 8000720:	f000 f90a 	bl	8000938 <systick_init>
	sp_to_psp();
 8000724:	f000 f8b0 	bl	8000888 <sp_to_psp>
	task1();
 8000728:	f000 fad0 	bl	8000ccc <task1>
#endif

	/* Loop forever */
	for (;;)
 800072c:	e7fe      	b.n	800072c <main+0x24>
	...

08000730 <schedule>:
		;
}
void schedule()
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
	volatile uint32_t *const ptr = (uint32_t*) ICSR;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <schedule+0x20>)
 8000738:	607b      	str	r3, [r7, #4]
	*ptr |= (1 << 28);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	e000ed04 	.word	0xe000ed04

08000754 <task_delay>:
void task_delay(uint32_t tick_count)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (currentTask != (MAX_TASK - 1))
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <task_delay+0x44>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d015      	beq.n	8000790 <task_delay+0x3c>
	{
		task[currentTask].blockCount = global_count + tick_count;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <task_delay+0x48>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <task_delay+0x44>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	441a      	add	r2, r3
 8000772:	490b      	ldr	r1, [pc, #44]	; (80007a0 <task_delay+0x4c>)
 8000774:	0103      	lsls	r3, r0, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	601a      	str	r2, [r3, #0]
		task[currentTask].currentState = blocked;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <task_delay+0x44>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <task_delay+0x4c>)
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	4413      	add	r3, r2
 8000786:	330c      	adds	r3, #12
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		schedule();
 800078c:	f7ff ffd0 	bl	8000730 <schedule>
	}
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000d8 	.word	0x200000d8
 800079c:	200000dc 	.word	0x200000dc
 80007a0:	20000088 	.word	0x20000088

080007a4 <task_stack_init>:

void task_stack_init()
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
//	task[0].stack_startAddr = TASK1_STACK_START;
	task[0].PSP = TASK1_STACK_START;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <task_stack_init+0x6c>)
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <task_stack_init+0x70>)
 80007ac:	605a      	str	r2, [r3, #4]
	task[0].pFun = task1;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <task_stack_init+0x6c>)
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <task_stack_init+0x74>)
 80007b2:	601a      	str	r2, [r3, #0]
	task[0].currentState = ready;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <task_stack_init+0x6c>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	731a      	strb	r2, [r3, #12]

//	task[1].stack_startAddr = TASK2_STACK_START;
	task[1].PSP = TASK2_STACK_START;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <task_stack_init+0x6c>)
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <task_stack_init+0x78>)
 80007be:	615a      	str	r2, [r3, #20]
	task[1].pFun = task2;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <task_stack_init+0x6c>)
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <task_stack_init+0x7c>)
 80007c4:	611a      	str	r2, [r3, #16]
	task[1].currentState = ready;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <task_stack_init+0x6c>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	771a      	strb	r2, [r3, #28]

//	task[2].stack_startAddr = TASK3_STACK_START;
	task[2].PSP = TASK3_STACK_START;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <task_stack_init+0x6c>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <task_stack_init+0x80>)
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
	task[2].pFun = task3;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <task_stack_init+0x6c>)
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <task_stack_init+0x84>)
 80007d6:	621a      	str	r2, [r3, #32]
	task[2].currentState = ready;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <task_stack_init+0x6c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//	task[3].stack_startAddr = TASK4_STACK_START;
	task[3].PSP = TASK4_STACK_START;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <task_stack_init+0x6c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <task_stack_init+0x88>)
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
	task[3].pFun = task4;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <task_stack_init+0x6c>)
 80007e8:	4a11      	ldr	r2, [pc, #68]	; (8000830 <task_stack_init+0x8c>)
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
	task[3].currentState = ready;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <task_stack_init+0x6c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	task[4].PSP = IDLE_STACK_START;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <task_stack_init+0x6c>)
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <task_stack_init+0x90>)
 80007f8:	645a      	str	r2, [r3, #68]	; 0x44
	task[4].pFun = idle;
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <task_stack_init+0x6c>)
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <task_stack_init+0x94>)
 80007fe:	641a      	str	r2, [r3, #64]	; 0x40
	task[4].currentState = ready;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <task_stack_init+0x6c>)
 8000802:	2201      	movs	r2, #1
 8000804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000088 	.word	0x20000088
 8000814:	20020000 	.word	0x20020000
 8000818:	08000ccd 	.word	0x08000ccd
 800081c:	2001fc00 	.word	0x2001fc00
 8000820:	08000d01 	.word	0x08000d01
 8000824:	2001f800 	.word	0x2001f800
 8000828:	08000d35 	.word	0x08000d35
 800082c:	2001f400 	.word	0x2001f400
 8000830:	08000d65 	.word	0x08000d65
 8000834:	2001f000 	.word	0x2001f000
 8000838:	08000d95 	.word	0x08000d95

0800083c <get_msp>:

uint32_t get_msp()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return SCHEDULER_STACK_START;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <get_msp+0x10>)
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2001ec00 	.word	0x2001ec00

08000850 <scheduler_stack_init>:

__attribute__((naked))void scheduler_stack_init()
{
	__asm volatile("PUSH {LR}");
 8000850:	b500      	push	{lr}
	__asm volatile("BL get_msp");
 8000852:	f7ff fff3 	bl	800083c <get_msp>
	__asm volatile("POP {LR}");
 8000856:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("MSR MSP,R0");
 800085a:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 800085e:	4770      	bx	lr
}
 8000860:	bf00      	nop
	...

08000864 <get_psp>:
uint32_t get_psp()
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	return task[currentTask].PSP;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <get_psp+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <get_psp+0x20>)
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	4413      	add	r3, r2
 8000872:	3304      	adds	r3, #4
 8000874:	681b      	ldr	r3, [r3, #0]
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	200000d8 	.word	0x200000d8
 8000884:	20000088 	.word	0x20000088

08000888 <sp_to_psp>:

__attribute__((naked))void sp_to_psp()
{
	//Initialize PSP with task 1
	__asm volatile("PUSH {LR}");
 8000888:	b500      	push	{lr}
	__asm volatile("BL get_psp");
 800088a:	f7ff ffeb 	bl	8000864 <get_psp>
	__asm volatile("POP {LR}");
 800088e:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("MSR PSP,R0");
 8000892:	f380 8809 	msr	PSP, r0

	//change to PSP as stack pointer for thread mode in unprivileged mode
	__asm volatile("MOV R0,#2");
 8000896:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 800089a:	f380 8814 	msr	CONTROL, r0

	__asm volatile("BX LR");
 800089e:	4770      	bx	lr

}
 80008a0:	bf00      	nop
	...

080008a4 <dummy_stack_init>:

void dummy_stack_init()
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	volatile uint32_t *ptr;
	for (uint8_t i = 0; i < MAX_TASK; i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	70fb      	strb	r3, [r7, #3]
 80008ae:	e038      	b.n	8000922 <dummy_stack_init+0x7e>
	{
		ptr = (uint32_t*) task[i].PSP;
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4a20      	ldr	r2, [pc, #128]	; (8000934 <dummy_stack_init+0x90>)
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	4413      	add	r3, r2
 80008b8:	3304      	adds	r3, #4
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	607b      	str	r3, [r7, #4]
		ptr--;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b04      	subs	r3, #4
 80008c2:	607b      	str	r3, [r7, #4]
		*ptr = XPSR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008ca:	601a      	str	r2, [r3, #0]
		ptr--;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b04      	subs	r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
		*ptr = (uint32_t) task[i].pFun;
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <dummy_stack_init+0x90>)
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	4413      	add	r3, r2
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
		ptr--;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3b04      	subs	r3, #4
 80008e6:	607b      	str	r3, [r7, #4]
		*ptr = LR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f06f 0202 	mvn.w	r2, #2
 80008ee:	601a      	str	r2, [r3, #0]
		for (uint8_t j = 0; j < 13; j++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	70bb      	strb	r3, [r7, #2]
 80008f4:	e008      	b.n	8000908 <dummy_stack_init+0x64>
		{
			ptr--;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b04      	subs	r3, #4
 80008fa:	607b      	str	r3, [r7, #4]
			*ptr = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
		for (uint8_t j = 0; j < 13; j++)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	3301      	adds	r3, #1
 8000906:	70bb      	strb	r3, [r7, #2]
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d9f3      	bls.n	80008f6 <dummy_stack_init+0x52>
		}
//		ptr--;
		task[i].PSP = (uint32_t) ptr;
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <dummy_stack_init+0x90>)
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	440b      	add	r3, r1
 8000918:	3304      	adds	r3, #4
 800091a:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_TASK; i++)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	3301      	adds	r3, #1
 8000920:	70fb      	strb	r3, [r7, #3]
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	2b04      	cmp	r3, #4
 8000926:	d9c3      	bls.n	80008b0 <dummy_stack_init+0xc>
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000088 	.word	0x20000088

08000938 <systick_init>:

void systick_init()
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	volatile sysTickContol_t *const pSYST_CSR = (sysTickContol_t*) SYST_CSR;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <systick_init+0x44>)
 8000940:	607b      	str	r3, [r7, #4]
	volatile sysTickCount_t *const pSYST_RVR = (sysTickCount_t*) SYST_RVR;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <systick_init+0x48>)
 8000944:	603b      	str	r3, [r7, #0]

	//systick enable
	pSYST_CSR->clockSource = 1;
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6013      	str	r3, [r2, #0]
	pSYST_CSR->systickCounterEnable = 1;
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6013      	str	r3, [r2, #0]
	pSYST_CSR->systickInterruptEnable = 1;
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6013      	str	r3, [r2, #0]

	//load count
	pSYST_RVR->count = (SYSTICK_COUNT - 1);
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	f643 617f 	movw	r1, #15999	; 0x3e7f
 800096c:	f361 0317 	bfi	r3, r1, #0, #24
 8000970:	6013      	str	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	e000e010 	.word	0xe000e010
 8000980:	e000e014 	.word	0xe000e014

08000984 <set_psp>:

void set_psp(uint32_t psp)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	task[currentTask].PSP = psp;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <set_psp+0x24>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <set_psp+0x28>)
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	4413      	add	r3, r2
 8000996:	3304      	adds	r3, #4
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	20000088 	.word	0x20000088

080009b0 <updateTask>:
void updateTask()
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
	state_e state = blocked;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < MAX_TASK; i++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	71bb      	strb	r3, [r7, #6]
 80009be:	e024      	b.n	8000a0a <updateTask+0x5a>
	{
		currentTask++;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <updateTask+0x7c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <updateTask+0x7c>)
 80009ca:	701a      	strb	r2, [r3, #0]
		currentTask %= MAX_TASK;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <updateTask+0x7c>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <updateTask+0x80>)
 80009d2:	fba3 1302 	umull	r1, r3, r3, r2
 80009d6:	0899      	lsrs	r1, r3, #2
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <updateTask+0x7c>)
 80009e4:	701a      	strb	r2, [r3, #0]
		state=task[currentTask].currentState;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <updateTask+0x7c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <updateTask+0x84>)
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	4413      	add	r3, r2
 80009f0:	330c      	adds	r3, #12
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	71fb      	strb	r3, [r7, #7]
		if((state==ready)&&(currentTask!=(MAX_TASK-1)))
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d103      	bne.n	8000a04 <updateTask+0x54>
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <updateTask+0x7c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d106      	bne.n	8000a12 <updateTask+0x62>
	for (uint8_t i = 0; i < MAX_TASK; i++)
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	3301      	adds	r3, #1
 8000a08:	71bb      	strb	r3, [r7, #6]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d9d7      	bls.n	80009c0 <updateTask+0x10>
 8000a10:	e000      	b.n	8000a14 <updateTask+0x64>
			break;
 8000a12:	bf00      	nop
	}
	if(state==blocked)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <updateTask+0x70>
		currentTask=(MAX_TASK-1);
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <updateTask+0x7c>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	701a      	strb	r2, [r3, #0]

}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	cccccccd 	.word	0xcccccccd
 8000a34:	20000088 	.word	0x20000088

08000a38 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler()
{
	__asm volatile("PUSH {LR}");
 8000a38:	b500      	push	{lr}
	__asm volatile("MRS R0,PSP");
 8000a3a:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 8000a3e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("BL set_psp");
 8000a42:	f7ff ff9f 	bl	8000984 <set_psp>

	__asm volatile("BL updateTask");
 8000a46:	f7ff ffb3 	bl	80009b0 <updateTask>
	__asm volatile("BL get_psp");
 8000a4a:	f7ff ff0b 	bl	8000864 <get_psp>
	__asm volatile("LDMIA R0!,{R4-R11}");
 8000a4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 8000a52:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000a56:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000a5a:	4770      	bx	lr
}
 8000a5c:	bf00      	nop
	...

08000a60 <unblockTask>:
void unblockTask()
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < (MAX_TASK - 1); i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	e01b      	b.n	8000aa4 <unblockTask+0x44>
	{
		if (task[i].currentState != ready)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <unblockTask+0x58>)
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	4413      	add	r3, r2
 8000a74:	330c      	adds	r3, #12
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d010      	beq.n	8000a9e <unblockTask+0x3e>
		{
			if (task[i].blockCount == global_count)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <unblockTask+0x58>)
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	4413      	add	r3, r2
 8000a84:	3308      	adds	r3, #8
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <unblockTask+0x5c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d106      	bne.n	8000a9e <unblockTask+0x3e>
			{
				task[i].currentState = ready;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <unblockTask+0x58>)
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	4413      	add	r3, r2
 8000a98:	330c      	adds	r3, #12
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (MAX_TASK - 1); i++)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d9e0      	bls.n	8000a6c <unblockTask+0xc>
			}
		}
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000088 	.word	0x20000088
 8000abc:	200000dc 	.word	0x200000dc

08000ac0 <updateGlobalCount>:

void updateGlobalCount()
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	global_count++;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <updateGlobalCount+0x18>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <updateGlobalCount+0x18>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200000dc 	.word	0x200000dc

08000adc <SysTick_Handler>:

void SysTick_Handler()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	updateGlobalCount();
 8000ae0:	f7ff ffee 	bl	8000ac0 <updateGlobalCount>
	unblockTask();
 8000ae4:	f7ff ffbc 	bl	8000a60 <unblockTask>
	schedule();
 8000ae8:	f7ff fe22 	bl	8000730 <schedule>

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HardFault_Handler>:
void HardFault_Handler()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	printf("In the bus fault handler\n");
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <HardFault_Handler+0x10>)
 8000af6:	f000 fa37 	bl	8000f68 <puts>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08001894 	.word	0x08001894

08000b04 <MemManage_Handler>:
void MemManage_Handler()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	printf("In the memory manage fault handler\n");
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <MemManage_Handler+0x10>)
 8000b0a:	f000 fa2d 	bl	8000f68 <puts>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	080018b0 	.word	0x080018b0

08000b18 <BusFault_Handler>:
void BusFault_Handler()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	printf("In the bus fault handler\n");
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <BusFault_Handler+0x10>)
 8000b1e:	f000 fa23 	bl	8000f68 <puts>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08001894 	.word	0x08001894

08000b2c <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	printf("In the usage fault handler\n");
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <UsageFault_Handler+0x10>)
 8000b32:	f000 fa19 	bl	8000f68 <puts>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	080018d4 	.word	0x080018d4

08000b40 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <ITM_SendChar+0x44>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <ITM_SendChar+0x44>)
 8000b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b54:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <ITM_SendChar+0x48>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <ITM_SendChar+0x48>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b62:	bf00      	nop
 8000b64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f8      	beq.n	8000b64 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	e000edfc 	.word	0xe000edfc
 8000b88:	e0000e00 	.word	0xe0000e00

08000b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
	}

return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e009      	b.n	8000bec <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffad 	bl	8000b40 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf1      	blt.n	8000bd8 <_write+0x12>
	}
	return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	605a      	str	r2, [r3, #4]
	return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	return 0;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
	...

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f000 f8ca 	bl	8000e28 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20020000 	.word	0x20020000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000e0 	.word	0x200000e0
 8000cc8:	200000f8 	.word	0x200000f8

08000ccc <task1>:
#include<stdio.h>
#include"header.h"
#include"gpio.h"
#include"delay.h"
void task1()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	while(1)
	{
		printf("1\n");
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <task1+0x30>)
 8000cd2:	f000 f949 	bl	8000f68 <puts>
		pinOutput(0, A, high);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fc06 	bl	80004ec <pinOutput>
		task_delay(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f7ff fd36 	bl	8000754 <task_delay>
		pinOutput(0, A, low);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fbfd 	bl	80004ec <pinOutput>
		task_delay(1000);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf6:	f7ff fd2d 	bl	8000754 <task_delay>
		printf("1\n");
 8000cfa:	e7e9      	b.n	8000cd0 <task1+0x4>
 8000cfc:	080018f0 	.word	0x080018f0

08000d00 <task2>:

	}

}
void task2()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	while(1)
	{
		printf("2\n");
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <task2+0x30>)
 8000d06:	f000 f92f 	bl	8000f68 <puts>
		pinOutput(2, A, high);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f7ff fbec 	bl	80004ec <pinOutput>
		task_delay(500);
 8000d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d18:	f7ff fd1c 	bl	8000754 <task_delay>
		pinOutput(2, A, low);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fbe3 	bl	80004ec <pinOutput>
		task_delay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f7ff fd13 	bl	8000754 <task_delay>
		printf("2\n");
 8000d2e:	e7e9      	b.n	8000d04 <task2+0x4>
 8000d30:	080018f4 	.word	0x080018f4

08000d34 <task3>:
	}

}
void task3()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

	while(1)
	{
		printf("3\n");
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <task3+0x2c>)
 8000d3a:	f000 f915 	bl	8000f68 <puts>
		pinOutput(4, A, high);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2100      	movs	r1, #0
 8000d42:	2004      	movs	r0, #4
 8000d44:	f7ff fbd2 	bl	80004ec <pinOutput>
		task_delay(250);
 8000d48:	20fa      	movs	r0, #250	; 0xfa
 8000d4a:	f7ff fd03 	bl	8000754 <task_delay>
		pinOutput(4, A, low);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2004      	movs	r0, #4
 8000d54:	f7ff fbca 	bl	80004ec <pinOutput>
		task_delay(250);
 8000d58:	20fa      	movs	r0, #250	; 0xfa
 8000d5a:	f7ff fcfb 	bl	8000754 <task_delay>
		printf("3\n");
 8000d5e:	e7eb      	b.n	8000d38 <task3+0x4>
 8000d60:	080018f8 	.word	0x080018f8

08000d64 <task4>:
	}

}
void task4()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

	while(1)
	{
		printf("4\n");
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <task4+0x2c>)
 8000d6a:	f000 f8fd 	bl	8000f68 <puts>
		pinOutput(13, C, low);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	200d      	movs	r0, #13
 8000d74:	f7ff fbba 	bl	80004ec <pinOutput>
		task_delay(125);
 8000d78:	207d      	movs	r0, #125	; 0x7d
 8000d7a:	f7ff fceb 	bl	8000754 <task_delay>
		pinOutput(13, C, high);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2102      	movs	r1, #2
 8000d82:	200d      	movs	r0, #13
 8000d84:	f7ff fbb2 	bl	80004ec <pinOutput>
		task_delay(125);
 8000d88:	207d      	movs	r0, #125	; 0x7d
 8000d8a:	f7ff fce3 	bl	8000754 <task_delay>
		printf("4\n");
 8000d8e:	e7eb      	b.n	8000d68 <task4+0x4>
 8000d90:	080018fc 	.word	0x080018fc

08000d94 <idle>:
	}

}
void idle()
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
	while(1);
 8000d98:	e7fe      	b.n	8000d98 <idle+0x4>
	...

08000d9c <enableAllFaultMonitoring>:
}

void enableAllFaultMonitoring()
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
	volatile faultEnable_t *const ptr=(faultEnable_t*)SHCRS;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <enableAllFaultMonitoring+0x34>)
 8000da4:	607b      	str	r3, [r7, #4]
	ptr->busFault_Enable=1;
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dae:	6013      	str	r3, [r2, #0]
	ptr->memoryFault_Enable=1;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
	ptr->usageFault_Enable=1;
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6813      	ldr	r3, [r2, #0]
 8000dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed24 	.word	0xe000ed24

08000dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e02:	f000 f817 	bl	8000e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff fc7f 	bl	8000708 <main>

08000e0a <LoopForever>:

LoopForever:
    b LoopForever
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
  ldr   r0, =_estack
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e18:	0800196c 	.word	0x0800196c
  ldr r2, =_sbss
 8000e1c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e20:	200000f4 	.word	0x200000f4

08000e24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <__errno>:
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <__errno+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000000 	.word	0x20000000

08000e34 <__libc_init_array>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	4d0d      	ldr	r5, [pc, #52]	; (8000e6c <__libc_init_array+0x38>)
 8000e38:	4c0d      	ldr	r4, [pc, #52]	; (8000e70 <__libc_init_array+0x3c>)
 8000e3a:	1b64      	subs	r4, r4, r5
 8000e3c:	10a4      	asrs	r4, r4, #2
 8000e3e:	2600      	movs	r6, #0
 8000e40:	42a6      	cmp	r6, r4
 8000e42:	d109      	bne.n	8000e58 <__libc_init_array+0x24>
 8000e44:	4d0b      	ldr	r5, [pc, #44]	; (8000e74 <__libc_init_array+0x40>)
 8000e46:	4c0c      	ldr	r4, [pc, #48]	; (8000e78 <__libc_init_array+0x44>)
 8000e48:	f000 fd18 	bl	800187c <_init>
 8000e4c:	1b64      	subs	r4, r4, r5
 8000e4e:	10a4      	asrs	r4, r4, #2
 8000e50:	2600      	movs	r6, #0
 8000e52:	42a6      	cmp	r6, r4
 8000e54:	d105      	bne.n	8000e62 <__libc_init_array+0x2e>
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5c:	4798      	blx	r3
 8000e5e:	3601      	adds	r6, #1
 8000e60:	e7ee      	b.n	8000e40 <__libc_init_array+0xc>
 8000e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e66:	4798      	blx	r3
 8000e68:	3601      	adds	r6, #1
 8000e6a:	e7f2      	b.n	8000e52 <__libc_init_array+0x1e>
 8000e6c:	08001964 	.word	0x08001964
 8000e70:	08001964 	.word	0x08001964
 8000e74:	08001964 	.word	0x08001964
 8000e78:	08001968 	.word	0x08001968

08000e7c <memset>:
 8000e7c:	4402      	add	r2, r0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d100      	bne.n	8000e86 <memset+0xa>
 8000e84:	4770      	bx	lr
 8000e86:	f803 1b01 	strb.w	r1, [r3], #1
 8000e8a:	e7f9      	b.n	8000e80 <memset+0x4>

08000e8c <_puts_r>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	460e      	mov	r6, r1
 8000e90:	4605      	mov	r5, r0
 8000e92:	b118      	cbz	r0, 8000e9c <_puts_r+0x10>
 8000e94:	6983      	ldr	r3, [r0, #24]
 8000e96:	b90b      	cbnz	r3, 8000e9c <_puts_r+0x10>
 8000e98:	f000 fa44 	bl	8001324 <__sinit>
 8000e9c:	69ab      	ldr	r3, [r5, #24]
 8000e9e:	68ac      	ldr	r4, [r5, #8]
 8000ea0:	b913      	cbnz	r3, 8000ea8 <_puts_r+0x1c>
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f000 fa3e 	bl	8001324 <__sinit>
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <_puts_r+0xd0>)
 8000eaa:	429c      	cmp	r4, r3
 8000eac:	d120      	bne.n	8000ef0 <_puts_r+0x64>
 8000eae:	686c      	ldr	r4, [r5, #4]
 8000eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000eb2:	07db      	lsls	r3, r3, #31
 8000eb4:	d405      	bmi.n	8000ec2 <_puts_r+0x36>
 8000eb6:	89a3      	ldrh	r3, [r4, #12]
 8000eb8:	0598      	lsls	r0, r3, #22
 8000eba:	d402      	bmi.n	8000ec2 <_puts_r+0x36>
 8000ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ebe:	f000 facf 	bl	8001460 <__retarget_lock_acquire_recursive>
 8000ec2:	89a3      	ldrh	r3, [r4, #12]
 8000ec4:	0719      	lsls	r1, r3, #28
 8000ec6:	d51d      	bpl.n	8000f04 <_puts_r+0x78>
 8000ec8:	6923      	ldr	r3, [r4, #16]
 8000eca:	b1db      	cbz	r3, 8000f04 <_puts_r+0x78>
 8000ecc:	3e01      	subs	r6, #1
 8000ece:	68a3      	ldr	r3, [r4, #8]
 8000ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	60a3      	str	r3, [r4, #8]
 8000ed8:	bb39      	cbnz	r1, 8000f2a <_puts_r+0x9e>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da38      	bge.n	8000f50 <_puts_r+0xc4>
 8000ede:	4622      	mov	r2, r4
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f000 f848 	bl	8000f78 <__swbuf_r>
 8000ee8:	3001      	adds	r0, #1
 8000eea:	d011      	beq.n	8000f10 <_puts_r+0x84>
 8000eec:	250a      	movs	r5, #10
 8000eee:	e011      	b.n	8000f14 <_puts_r+0x88>
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <_puts_r+0xd4>)
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	d101      	bne.n	8000efa <_puts_r+0x6e>
 8000ef6:	68ac      	ldr	r4, [r5, #8]
 8000ef8:	e7da      	b.n	8000eb0 <_puts_r+0x24>
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <_puts_r+0xd8>)
 8000efc:	429c      	cmp	r4, r3
 8000efe:	bf08      	it	eq
 8000f00:	68ec      	ldreq	r4, [r5, #12]
 8000f02:	e7d5      	b.n	8000eb0 <_puts_r+0x24>
 8000f04:	4621      	mov	r1, r4
 8000f06:	4628      	mov	r0, r5
 8000f08:	f000 f888 	bl	800101c <__swsetup_r>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d0dd      	beq.n	8000ecc <_puts_r+0x40>
 8000f10:	f04f 35ff 	mov.w	r5, #4294967295
 8000f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f16:	07da      	lsls	r2, r3, #31
 8000f18:	d405      	bmi.n	8000f26 <_puts_r+0x9a>
 8000f1a:	89a3      	ldrh	r3, [r4, #12]
 8000f1c:	059b      	lsls	r3, r3, #22
 8000f1e:	d402      	bmi.n	8000f26 <_puts_r+0x9a>
 8000f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f22:	f000 fa9e 	bl	8001462 <__retarget_lock_release_recursive>
 8000f26:	4628      	mov	r0, r5
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	da04      	bge.n	8000f38 <_puts_r+0xac>
 8000f2e:	69a2      	ldr	r2, [r4, #24]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dc06      	bgt.n	8000f42 <_puts_r+0xb6>
 8000f34:	290a      	cmp	r1, #10
 8000f36:	d004      	beq.n	8000f42 <_puts_r+0xb6>
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	6022      	str	r2, [r4, #0]
 8000f3e:	7019      	strb	r1, [r3, #0]
 8000f40:	e7c5      	b.n	8000ece <_puts_r+0x42>
 8000f42:	4622      	mov	r2, r4
 8000f44:	4628      	mov	r0, r5
 8000f46:	f000 f817 	bl	8000f78 <__swbuf_r>
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	d1bf      	bne.n	8000ece <_puts_r+0x42>
 8000f4e:	e7df      	b.n	8000f10 <_puts_r+0x84>
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	250a      	movs	r5, #10
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	6022      	str	r2, [r4, #0]
 8000f58:	701d      	strb	r5, [r3, #0]
 8000f5a:	e7db      	b.n	8000f14 <_puts_r+0x88>
 8000f5c:	08001924 	.word	0x08001924
 8000f60:	08001944 	.word	0x08001944
 8000f64:	08001904 	.word	0x08001904

08000f68 <puts>:
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <puts+0xc>)
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f7ff bf8d 	b.w	8000e8c <_puts_r>
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000

08000f78 <__swbuf_r>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	460e      	mov	r6, r1
 8000f7c:	4614      	mov	r4, r2
 8000f7e:	4605      	mov	r5, r0
 8000f80:	b118      	cbz	r0, 8000f8a <__swbuf_r+0x12>
 8000f82:	6983      	ldr	r3, [r0, #24]
 8000f84:	b90b      	cbnz	r3, 8000f8a <__swbuf_r+0x12>
 8000f86:	f000 f9cd 	bl	8001324 <__sinit>
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <__swbuf_r+0x98>)
 8000f8c:	429c      	cmp	r4, r3
 8000f8e:	d12b      	bne.n	8000fe8 <__swbuf_r+0x70>
 8000f90:	686c      	ldr	r4, [r5, #4]
 8000f92:	69a3      	ldr	r3, [r4, #24]
 8000f94:	60a3      	str	r3, [r4, #8]
 8000f96:	89a3      	ldrh	r3, [r4, #12]
 8000f98:	071a      	lsls	r2, r3, #28
 8000f9a:	d52f      	bpl.n	8000ffc <__swbuf_r+0x84>
 8000f9c:	6923      	ldr	r3, [r4, #16]
 8000f9e:	b36b      	cbz	r3, 8000ffc <__swbuf_r+0x84>
 8000fa0:	6923      	ldr	r3, [r4, #16]
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	1ac0      	subs	r0, r0, r3
 8000fa6:	6963      	ldr	r3, [r4, #20]
 8000fa8:	b2f6      	uxtb	r6, r6
 8000faa:	4283      	cmp	r3, r0
 8000fac:	4637      	mov	r7, r6
 8000fae:	dc04      	bgt.n	8000fba <__swbuf_r+0x42>
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f000 f922 	bl	80011fc <_fflush_r>
 8000fb8:	bb30      	cbnz	r0, 8001008 <__swbuf_r+0x90>
 8000fba:	68a3      	ldr	r3, [r4, #8]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60a3      	str	r3, [r4, #8]
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	6022      	str	r2, [r4, #0]
 8000fc6:	701e      	strb	r6, [r3, #0]
 8000fc8:	6963      	ldr	r3, [r4, #20]
 8000fca:	3001      	adds	r0, #1
 8000fcc:	4283      	cmp	r3, r0
 8000fce:	d004      	beq.n	8000fda <__swbuf_r+0x62>
 8000fd0:	89a3      	ldrh	r3, [r4, #12]
 8000fd2:	07db      	lsls	r3, r3, #31
 8000fd4:	d506      	bpl.n	8000fe4 <__swbuf_r+0x6c>
 8000fd6:	2e0a      	cmp	r6, #10
 8000fd8:	d104      	bne.n	8000fe4 <__swbuf_r+0x6c>
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4628      	mov	r0, r5
 8000fde:	f000 f90d 	bl	80011fc <_fflush_r>
 8000fe2:	b988      	cbnz	r0, 8001008 <__swbuf_r+0x90>
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <__swbuf_r+0x9c>)
 8000fea:	429c      	cmp	r4, r3
 8000fec:	d101      	bne.n	8000ff2 <__swbuf_r+0x7a>
 8000fee:	68ac      	ldr	r4, [r5, #8]
 8000ff0:	e7cf      	b.n	8000f92 <__swbuf_r+0x1a>
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <__swbuf_r+0xa0>)
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	bf08      	it	eq
 8000ff8:	68ec      	ldreq	r4, [r5, #12]
 8000ffa:	e7ca      	b.n	8000f92 <__swbuf_r+0x1a>
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4628      	mov	r0, r5
 8001000:	f000 f80c 	bl	800101c <__swsetup_r>
 8001004:	2800      	cmp	r0, #0
 8001006:	d0cb      	beq.n	8000fa0 <__swbuf_r+0x28>
 8001008:	f04f 37ff 	mov.w	r7, #4294967295
 800100c:	e7ea      	b.n	8000fe4 <__swbuf_r+0x6c>
 800100e:	bf00      	nop
 8001010:	08001924 	.word	0x08001924
 8001014:	08001944 	.word	0x08001944
 8001018:	08001904 	.word	0x08001904

0800101c <__swsetup_r>:
 800101c:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <__swsetup_r+0xcc>)
 800101e:	b570      	push	{r4, r5, r6, lr}
 8001020:	681d      	ldr	r5, [r3, #0]
 8001022:	4606      	mov	r6, r0
 8001024:	460c      	mov	r4, r1
 8001026:	b125      	cbz	r5, 8001032 <__swsetup_r+0x16>
 8001028:	69ab      	ldr	r3, [r5, #24]
 800102a:	b913      	cbnz	r3, 8001032 <__swsetup_r+0x16>
 800102c:	4628      	mov	r0, r5
 800102e:	f000 f979 	bl	8001324 <__sinit>
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <__swsetup_r+0xd0>)
 8001034:	429c      	cmp	r4, r3
 8001036:	d10f      	bne.n	8001058 <__swsetup_r+0x3c>
 8001038:	686c      	ldr	r4, [r5, #4]
 800103a:	89a3      	ldrh	r3, [r4, #12]
 800103c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001040:	0719      	lsls	r1, r3, #28
 8001042:	d42c      	bmi.n	800109e <__swsetup_r+0x82>
 8001044:	06dd      	lsls	r5, r3, #27
 8001046:	d411      	bmi.n	800106c <__swsetup_r+0x50>
 8001048:	2309      	movs	r3, #9
 800104a:	6033      	str	r3, [r6, #0]
 800104c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001050:	81a3      	strh	r3, [r4, #12]
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	e03e      	b.n	80010d6 <__swsetup_r+0xba>
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <__swsetup_r+0xd4>)
 800105a:	429c      	cmp	r4, r3
 800105c:	d101      	bne.n	8001062 <__swsetup_r+0x46>
 800105e:	68ac      	ldr	r4, [r5, #8]
 8001060:	e7eb      	b.n	800103a <__swsetup_r+0x1e>
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <__swsetup_r+0xd8>)
 8001064:	429c      	cmp	r4, r3
 8001066:	bf08      	it	eq
 8001068:	68ec      	ldreq	r4, [r5, #12]
 800106a:	e7e6      	b.n	800103a <__swsetup_r+0x1e>
 800106c:	0758      	lsls	r0, r3, #29
 800106e:	d512      	bpl.n	8001096 <__swsetup_r+0x7a>
 8001070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001072:	b141      	cbz	r1, 8001086 <__swsetup_r+0x6a>
 8001074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001078:	4299      	cmp	r1, r3
 800107a:	d002      	beq.n	8001082 <__swsetup_r+0x66>
 800107c:	4630      	mov	r0, r6
 800107e:	f000 fa57 	bl	8001530 <_free_r>
 8001082:	2300      	movs	r3, #0
 8001084:	6363      	str	r3, [r4, #52]	; 0x34
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800108c:	81a3      	strh	r3, [r4, #12]
 800108e:	2300      	movs	r3, #0
 8001090:	6063      	str	r3, [r4, #4]
 8001092:	6923      	ldr	r3, [r4, #16]
 8001094:	6023      	str	r3, [r4, #0]
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	81a3      	strh	r3, [r4, #12]
 800109e:	6923      	ldr	r3, [r4, #16]
 80010a0:	b94b      	cbnz	r3, 80010b6 <__swsetup_r+0x9a>
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80010a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ac:	d003      	beq.n	80010b6 <__swsetup_r+0x9a>
 80010ae:	4621      	mov	r1, r4
 80010b0:	4630      	mov	r0, r6
 80010b2:	f000 f9fd 	bl	80014b0 <__smakebuf_r>
 80010b6:	89a0      	ldrh	r0, [r4, #12]
 80010b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010bc:	f010 0301 	ands.w	r3, r0, #1
 80010c0:	d00a      	beq.n	80010d8 <__swsetup_r+0xbc>
 80010c2:	2300      	movs	r3, #0
 80010c4:	60a3      	str	r3, [r4, #8]
 80010c6:	6963      	ldr	r3, [r4, #20]
 80010c8:	425b      	negs	r3, r3
 80010ca:	61a3      	str	r3, [r4, #24]
 80010cc:	6923      	ldr	r3, [r4, #16]
 80010ce:	b943      	cbnz	r3, 80010e2 <__swsetup_r+0xc6>
 80010d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80010d4:	d1ba      	bne.n	800104c <__swsetup_r+0x30>
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	0781      	lsls	r1, r0, #30
 80010da:	bf58      	it	pl
 80010dc:	6963      	ldrpl	r3, [r4, #20]
 80010de:	60a3      	str	r3, [r4, #8]
 80010e0:	e7f4      	b.n	80010cc <__swsetup_r+0xb0>
 80010e2:	2000      	movs	r0, #0
 80010e4:	e7f7      	b.n	80010d6 <__swsetup_r+0xba>
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	08001924 	.word	0x08001924
 80010f0:	08001944 	.word	0x08001944
 80010f4:	08001904 	.word	0x08001904

080010f8 <__sflush_r>:
 80010f8:	898a      	ldrh	r2, [r1, #12]
 80010fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fc:	4605      	mov	r5, r0
 80010fe:	0710      	lsls	r0, r2, #28
 8001100:	460c      	mov	r4, r1
 8001102:	d457      	bmi.n	80011b4 <__sflush_r+0xbc>
 8001104:	684b      	ldr	r3, [r1, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc04      	bgt.n	8001114 <__sflush_r+0x1c>
 800110a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	dc01      	bgt.n	8001114 <__sflush_r+0x1c>
 8001110:	2000      	movs	r0, #0
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001116:	2e00      	cmp	r6, #0
 8001118:	d0fa      	beq.n	8001110 <__sflush_r+0x18>
 800111a:	2300      	movs	r3, #0
 800111c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001120:	682f      	ldr	r7, [r5, #0]
 8001122:	602b      	str	r3, [r5, #0]
 8001124:	d032      	beq.n	800118c <__sflush_r+0x94>
 8001126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001128:	89a3      	ldrh	r3, [r4, #12]
 800112a:	075a      	lsls	r2, r3, #29
 800112c:	d505      	bpl.n	800113a <__sflush_r+0x42>
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	1ac0      	subs	r0, r0, r3
 8001132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001134:	b10b      	cbz	r3, 800113a <__sflush_r+0x42>
 8001136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001138:	1ac0      	subs	r0, r0, r3
 800113a:	2300      	movs	r3, #0
 800113c:	4602      	mov	r2, r0
 800113e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001140:	6a21      	ldr	r1, [r4, #32]
 8001142:	4628      	mov	r0, r5
 8001144:	47b0      	blx	r6
 8001146:	1c43      	adds	r3, r0, #1
 8001148:	89a3      	ldrh	r3, [r4, #12]
 800114a:	d106      	bne.n	800115a <__sflush_r+0x62>
 800114c:	6829      	ldr	r1, [r5, #0]
 800114e:	291d      	cmp	r1, #29
 8001150:	d82c      	bhi.n	80011ac <__sflush_r+0xb4>
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <__sflush_r+0x100>)
 8001154:	40ca      	lsrs	r2, r1
 8001156:	07d6      	lsls	r6, r2, #31
 8001158:	d528      	bpl.n	80011ac <__sflush_r+0xb4>
 800115a:	2200      	movs	r2, #0
 800115c:	6062      	str	r2, [r4, #4]
 800115e:	04d9      	lsls	r1, r3, #19
 8001160:	6922      	ldr	r2, [r4, #16]
 8001162:	6022      	str	r2, [r4, #0]
 8001164:	d504      	bpl.n	8001170 <__sflush_r+0x78>
 8001166:	1c42      	adds	r2, r0, #1
 8001168:	d101      	bne.n	800116e <__sflush_r+0x76>
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	b903      	cbnz	r3, 8001170 <__sflush_r+0x78>
 800116e:	6560      	str	r0, [r4, #84]	; 0x54
 8001170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001172:	602f      	str	r7, [r5, #0]
 8001174:	2900      	cmp	r1, #0
 8001176:	d0cb      	beq.n	8001110 <__sflush_r+0x18>
 8001178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800117c:	4299      	cmp	r1, r3
 800117e:	d002      	beq.n	8001186 <__sflush_r+0x8e>
 8001180:	4628      	mov	r0, r5
 8001182:	f000 f9d5 	bl	8001530 <_free_r>
 8001186:	2000      	movs	r0, #0
 8001188:	6360      	str	r0, [r4, #52]	; 0x34
 800118a:	e7c2      	b.n	8001112 <__sflush_r+0x1a>
 800118c:	6a21      	ldr	r1, [r4, #32]
 800118e:	2301      	movs	r3, #1
 8001190:	4628      	mov	r0, r5
 8001192:	47b0      	blx	r6
 8001194:	1c41      	adds	r1, r0, #1
 8001196:	d1c7      	bne.n	8001128 <__sflush_r+0x30>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0c4      	beq.n	8001128 <__sflush_r+0x30>
 800119e:	2b1d      	cmp	r3, #29
 80011a0:	d001      	beq.n	80011a6 <__sflush_r+0xae>
 80011a2:	2b16      	cmp	r3, #22
 80011a4:	d101      	bne.n	80011aa <__sflush_r+0xb2>
 80011a6:	602f      	str	r7, [r5, #0]
 80011a8:	e7b2      	b.n	8001110 <__sflush_r+0x18>
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	e7ae      	b.n	8001112 <__sflush_r+0x1a>
 80011b4:	690f      	ldr	r7, [r1, #16]
 80011b6:	2f00      	cmp	r7, #0
 80011b8:	d0aa      	beq.n	8001110 <__sflush_r+0x18>
 80011ba:	0793      	lsls	r3, r2, #30
 80011bc:	680e      	ldr	r6, [r1, #0]
 80011be:	bf08      	it	eq
 80011c0:	694b      	ldreq	r3, [r1, #20]
 80011c2:	600f      	str	r7, [r1, #0]
 80011c4:	bf18      	it	ne
 80011c6:	2300      	movne	r3, #0
 80011c8:	1bf6      	subs	r6, r6, r7
 80011ca:	608b      	str	r3, [r1, #8]
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	dd9f      	ble.n	8001110 <__sflush_r+0x18>
 80011d0:	6a21      	ldr	r1, [r4, #32]
 80011d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011d6:	4633      	mov	r3, r6
 80011d8:	463a      	mov	r2, r7
 80011da:	4628      	mov	r0, r5
 80011dc:	47e0      	blx	ip
 80011de:	2800      	cmp	r0, #0
 80011e0:	dc06      	bgt.n	80011f0 <__sflush_r+0xf8>
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e8:	81a3      	strh	r3, [r4, #12]
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	e790      	b.n	8001112 <__sflush_r+0x1a>
 80011f0:	4407      	add	r7, r0
 80011f2:	1a36      	subs	r6, r6, r0
 80011f4:	e7ea      	b.n	80011cc <__sflush_r+0xd4>
 80011f6:	bf00      	nop
 80011f8:	20400001 	.word	0x20400001

080011fc <_fflush_r>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	690b      	ldr	r3, [r1, #16]
 8001200:	4605      	mov	r5, r0
 8001202:	460c      	mov	r4, r1
 8001204:	b913      	cbnz	r3, 800120c <_fflush_r+0x10>
 8001206:	2500      	movs	r5, #0
 8001208:	4628      	mov	r0, r5
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	b118      	cbz	r0, 8001216 <_fflush_r+0x1a>
 800120e:	6983      	ldr	r3, [r0, #24]
 8001210:	b90b      	cbnz	r3, 8001216 <_fflush_r+0x1a>
 8001212:	f000 f887 	bl	8001324 <__sinit>
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <_fflush_r+0x6c>)
 8001218:	429c      	cmp	r4, r3
 800121a:	d11b      	bne.n	8001254 <_fflush_r+0x58>
 800121c:	686c      	ldr	r4, [r5, #4]
 800121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0ef      	beq.n	8001206 <_fflush_r+0xa>
 8001226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001228:	07d0      	lsls	r0, r2, #31
 800122a:	d404      	bmi.n	8001236 <_fflush_r+0x3a>
 800122c:	0599      	lsls	r1, r3, #22
 800122e:	d402      	bmi.n	8001236 <_fflush_r+0x3a>
 8001230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001232:	f000 f915 	bl	8001460 <__retarget_lock_acquire_recursive>
 8001236:	4628      	mov	r0, r5
 8001238:	4621      	mov	r1, r4
 800123a:	f7ff ff5d 	bl	80010f8 <__sflush_r>
 800123e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001240:	07da      	lsls	r2, r3, #31
 8001242:	4605      	mov	r5, r0
 8001244:	d4e0      	bmi.n	8001208 <_fflush_r+0xc>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	059b      	lsls	r3, r3, #22
 800124a:	d4dd      	bmi.n	8001208 <_fflush_r+0xc>
 800124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124e:	f000 f908 	bl	8001462 <__retarget_lock_release_recursive>
 8001252:	e7d9      	b.n	8001208 <_fflush_r+0xc>
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <_fflush_r+0x70>)
 8001256:	429c      	cmp	r4, r3
 8001258:	d101      	bne.n	800125e <_fflush_r+0x62>
 800125a:	68ac      	ldr	r4, [r5, #8]
 800125c:	e7df      	b.n	800121e <_fflush_r+0x22>
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <_fflush_r+0x74>)
 8001260:	429c      	cmp	r4, r3
 8001262:	bf08      	it	eq
 8001264:	68ec      	ldreq	r4, [r5, #12]
 8001266:	e7da      	b.n	800121e <_fflush_r+0x22>
 8001268:	08001924 	.word	0x08001924
 800126c:	08001944 	.word	0x08001944
 8001270:	08001904 	.word	0x08001904

08001274 <std>:
 8001274:	2300      	movs	r3, #0
 8001276:	b510      	push	{r4, lr}
 8001278:	4604      	mov	r4, r0
 800127a:	e9c0 3300 	strd	r3, r3, [r0]
 800127e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001282:	6083      	str	r3, [r0, #8]
 8001284:	8181      	strh	r1, [r0, #12]
 8001286:	6643      	str	r3, [r0, #100]	; 0x64
 8001288:	81c2      	strh	r2, [r0, #14]
 800128a:	6183      	str	r3, [r0, #24]
 800128c:	4619      	mov	r1, r3
 800128e:	2208      	movs	r2, #8
 8001290:	305c      	adds	r0, #92	; 0x5c
 8001292:	f7ff fdf3 	bl	8000e7c <memset>
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <std+0x38>)
 8001298:	6263      	str	r3, [r4, #36]	; 0x24
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <std+0x3c>)
 800129c:	62a3      	str	r3, [r4, #40]	; 0x28
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <std+0x40>)
 80012a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <std+0x44>)
 80012a4:	6224      	str	r4, [r4, #32]
 80012a6:	6323      	str	r3, [r4, #48]	; 0x30
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	bf00      	nop
 80012ac:	0800170d 	.word	0x0800170d
 80012b0:	0800172f 	.word	0x0800172f
 80012b4:	08001767 	.word	0x08001767
 80012b8:	0800178b 	.word	0x0800178b

080012bc <_cleanup_r>:
 80012bc:	4901      	ldr	r1, [pc, #4]	; (80012c4 <_cleanup_r+0x8>)
 80012be:	f000 b8af 	b.w	8001420 <_fwalk_reent>
 80012c2:	bf00      	nop
 80012c4:	080011fd 	.word	0x080011fd

080012c8 <__sfmoreglue>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	2268      	movs	r2, #104	; 0x68
 80012cc:	1e4d      	subs	r5, r1, #1
 80012ce:	4355      	muls	r5, r2
 80012d0:	460e      	mov	r6, r1
 80012d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80012d6:	f000 f995 	bl	8001604 <_malloc_r>
 80012da:	4604      	mov	r4, r0
 80012dc:	b140      	cbz	r0, 80012f0 <__sfmoreglue+0x28>
 80012de:	2100      	movs	r1, #0
 80012e0:	e9c0 1600 	strd	r1, r6, [r0]
 80012e4:	300c      	adds	r0, #12
 80012e6:	60a0      	str	r0, [r4, #8]
 80012e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80012ec:	f7ff fdc6 	bl	8000e7c <memset>
 80012f0:	4620      	mov	r0, r4
 80012f2:	bd70      	pop	{r4, r5, r6, pc}

080012f4 <__sfp_lock_acquire>:
 80012f4:	4801      	ldr	r0, [pc, #4]	; (80012fc <__sfp_lock_acquire+0x8>)
 80012f6:	f000 b8b3 	b.w	8001460 <__retarget_lock_acquire_recursive>
 80012fa:	bf00      	nop
 80012fc:	200000e5 	.word	0x200000e5

08001300 <__sfp_lock_release>:
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <__sfp_lock_release+0x8>)
 8001302:	f000 b8ae 	b.w	8001462 <__retarget_lock_release_recursive>
 8001306:	bf00      	nop
 8001308:	200000e5 	.word	0x200000e5

0800130c <__sinit_lock_acquire>:
 800130c:	4801      	ldr	r0, [pc, #4]	; (8001314 <__sinit_lock_acquire+0x8>)
 800130e:	f000 b8a7 	b.w	8001460 <__retarget_lock_acquire_recursive>
 8001312:	bf00      	nop
 8001314:	200000e6 	.word	0x200000e6

08001318 <__sinit_lock_release>:
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <__sinit_lock_release+0x8>)
 800131a:	f000 b8a2 	b.w	8001462 <__retarget_lock_release_recursive>
 800131e:	bf00      	nop
 8001320:	200000e6 	.word	0x200000e6

08001324 <__sinit>:
 8001324:	b510      	push	{r4, lr}
 8001326:	4604      	mov	r4, r0
 8001328:	f7ff fff0 	bl	800130c <__sinit_lock_acquire>
 800132c:	69a3      	ldr	r3, [r4, #24]
 800132e:	b11b      	cbz	r3, 8001338 <__sinit+0x14>
 8001330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001334:	f7ff bff0 	b.w	8001318 <__sinit_lock_release>
 8001338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800133c:	6523      	str	r3, [r4, #80]	; 0x50
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <__sinit+0x68>)
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <__sinit+0x6c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	62a2      	str	r2, [r4, #40]	; 0x28
 8001346:	42a3      	cmp	r3, r4
 8001348:	bf04      	itt	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	61a3      	streq	r3, [r4, #24]
 800134e:	4620      	mov	r0, r4
 8001350:	f000 f820 	bl	8001394 <__sfp>
 8001354:	6060      	str	r0, [r4, #4]
 8001356:	4620      	mov	r0, r4
 8001358:	f000 f81c 	bl	8001394 <__sfp>
 800135c:	60a0      	str	r0, [r4, #8]
 800135e:	4620      	mov	r0, r4
 8001360:	f000 f818 	bl	8001394 <__sfp>
 8001364:	2200      	movs	r2, #0
 8001366:	60e0      	str	r0, [r4, #12]
 8001368:	2104      	movs	r1, #4
 800136a:	6860      	ldr	r0, [r4, #4]
 800136c:	f7ff ff82 	bl	8001274 <std>
 8001370:	68a0      	ldr	r0, [r4, #8]
 8001372:	2201      	movs	r2, #1
 8001374:	2109      	movs	r1, #9
 8001376:	f7ff ff7d 	bl	8001274 <std>
 800137a:	68e0      	ldr	r0, [r4, #12]
 800137c:	2202      	movs	r2, #2
 800137e:	2112      	movs	r1, #18
 8001380:	f7ff ff78 	bl	8001274 <std>
 8001384:	2301      	movs	r3, #1
 8001386:	61a3      	str	r3, [r4, #24]
 8001388:	e7d2      	b.n	8001330 <__sinit+0xc>
 800138a:	bf00      	nop
 800138c:	08001900 	.word	0x08001900
 8001390:	080012bd 	.word	0x080012bd

08001394 <__sfp>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	4607      	mov	r7, r0
 8001398:	f7ff ffac 	bl	80012f4 <__sfp_lock_acquire>
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <__sfp+0x84>)
 800139e:	681e      	ldr	r6, [r3, #0]
 80013a0:	69b3      	ldr	r3, [r6, #24]
 80013a2:	b913      	cbnz	r3, 80013aa <__sfp+0x16>
 80013a4:	4630      	mov	r0, r6
 80013a6:	f7ff ffbd 	bl	8001324 <__sinit>
 80013aa:	3648      	adds	r6, #72	; 0x48
 80013ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	d503      	bpl.n	80013bc <__sfp+0x28>
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	b30b      	cbz	r3, 80013fc <__sfp+0x68>
 80013b8:	6836      	ldr	r6, [r6, #0]
 80013ba:	e7f7      	b.n	80013ac <__sfp+0x18>
 80013bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80013c0:	b9d5      	cbnz	r5, 80013f8 <__sfp+0x64>
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <__sfp+0x88>)
 80013c4:	60e3      	str	r3, [r4, #12]
 80013c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80013ca:	6665      	str	r5, [r4, #100]	; 0x64
 80013cc:	f000 f847 	bl	800145e <__retarget_lock_init_recursive>
 80013d0:	f7ff ff96 	bl	8001300 <__sfp_lock_release>
 80013d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80013d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80013dc:	6025      	str	r5, [r4, #0]
 80013de:	61a5      	str	r5, [r4, #24]
 80013e0:	2208      	movs	r2, #8
 80013e2:	4629      	mov	r1, r5
 80013e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80013e8:	f7ff fd48 	bl	8000e7c <memset>
 80013ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013f4:	4620      	mov	r0, r4
 80013f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f8:	3468      	adds	r4, #104	; 0x68
 80013fa:	e7d9      	b.n	80013b0 <__sfp+0x1c>
 80013fc:	2104      	movs	r1, #4
 80013fe:	4638      	mov	r0, r7
 8001400:	f7ff ff62 	bl	80012c8 <__sfmoreglue>
 8001404:	4604      	mov	r4, r0
 8001406:	6030      	str	r0, [r6, #0]
 8001408:	2800      	cmp	r0, #0
 800140a:	d1d5      	bne.n	80013b8 <__sfp+0x24>
 800140c:	f7ff ff78 	bl	8001300 <__sfp_lock_release>
 8001410:	230c      	movs	r3, #12
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	e7ee      	b.n	80013f4 <__sfp+0x60>
 8001416:	bf00      	nop
 8001418:	08001900 	.word	0x08001900
 800141c:	ffff0001 	.word	0xffff0001

08001420 <_fwalk_reent>:
 8001420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001424:	4606      	mov	r6, r0
 8001426:	4688      	mov	r8, r1
 8001428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800142c:	2700      	movs	r7, #0
 800142e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001432:	f1b9 0901 	subs.w	r9, r9, #1
 8001436:	d505      	bpl.n	8001444 <_fwalk_reent+0x24>
 8001438:	6824      	ldr	r4, [r4, #0]
 800143a:	2c00      	cmp	r4, #0
 800143c:	d1f7      	bne.n	800142e <_fwalk_reent+0xe>
 800143e:	4638      	mov	r0, r7
 8001440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001444:	89ab      	ldrh	r3, [r5, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d907      	bls.n	800145a <_fwalk_reent+0x3a>
 800144a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800144e:	3301      	adds	r3, #1
 8001450:	d003      	beq.n	800145a <_fwalk_reent+0x3a>
 8001452:	4629      	mov	r1, r5
 8001454:	4630      	mov	r0, r6
 8001456:	47c0      	blx	r8
 8001458:	4307      	orrs	r7, r0
 800145a:	3568      	adds	r5, #104	; 0x68
 800145c:	e7e9      	b.n	8001432 <_fwalk_reent+0x12>

0800145e <__retarget_lock_init_recursive>:
 800145e:	4770      	bx	lr

08001460 <__retarget_lock_acquire_recursive>:
 8001460:	4770      	bx	lr

08001462 <__retarget_lock_release_recursive>:
 8001462:	4770      	bx	lr

08001464 <__swhatbuf_r>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	460e      	mov	r6, r1
 8001468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800146c:	2900      	cmp	r1, #0
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	4614      	mov	r4, r2
 8001472:	461d      	mov	r5, r3
 8001474:	da08      	bge.n	8001488 <__swhatbuf_r+0x24>
 8001476:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	602a      	str	r2, [r5, #0]
 800147e:	061a      	lsls	r2, r3, #24
 8001480:	d410      	bmi.n	80014a4 <__swhatbuf_r+0x40>
 8001482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001486:	e00e      	b.n	80014a6 <__swhatbuf_r+0x42>
 8001488:	466a      	mov	r2, sp
 800148a:	f000 f9a5 	bl	80017d8 <_fstat_r>
 800148e:	2800      	cmp	r0, #0
 8001490:	dbf1      	blt.n	8001476 <__swhatbuf_r+0x12>
 8001492:	9a01      	ldr	r2, [sp, #4]
 8001494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800149c:	425a      	negs	r2, r3
 800149e:	415a      	adcs	r2, r3
 80014a0:	602a      	str	r2, [r5, #0]
 80014a2:	e7ee      	b.n	8001482 <__swhatbuf_r+0x1e>
 80014a4:	2340      	movs	r3, #64	; 0x40
 80014a6:	2000      	movs	r0, #0
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	b016      	add	sp, #88	; 0x58
 80014ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080014b0 <__smakebuf_r>:
 80014b0:	898b      	ldrh	r3, [r1, #12]
 80014b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014b4:	079d      	lsls	r5, r3, #30
 80014b6:	4606      	mov	r6, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	d507      	bpl.n	80014cc <__smakebuf_r+0x1c>
 80014bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	6123      	str	r3, [r4, #16]
 80014c4:	2301      	movs	r3, #1
 80014c6:	6163      	str	r3, [r4, #20]
 80014c8:	b002      	add	sp, #8
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
 80014cc:	ab01      	add	r3, sp, #4
 80014ce:	466a      	mov	r2, sp
 80014d0:	f7ff ffc8 	bl	8001464 <__swhatbuf_r>
 80014d4:	9900      	ldr	r1, [sp, #0]
 80014d6:	4605      	mov	r5, r0
 80014d8:	4630      	mov	r0, r6
 80014da:	f000 f893 	bl	8001604 <_malloc_r>
 80014de:	b948      	cbnz	r0, 80014f4 <__smakebuf_r+0x44>
 80014e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e4:	059a      	lsls	r2, r3, #22
 80014e6:	d4ef      	bmi.n	80014c8 <__smakebuf_r+0x18>
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	81a3      	strh	r3, [r4, #12]
 80014f2:	e7e3      	b.n	80014bc <__smakebuf_r+0xc>
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <__smakebuf_r+0x7c>)
 80014f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	6020      	str	r0, [r4, #0]
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	81a3      	strh	r3, [r4, #12]
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	6163      	str	r3, [r4, #20]
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	6120      	str	r0, [r4, #16]
 800150a:	b15b      	cbz	r3, 8001524 <__smakebuf_r+0x74>
 800150c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001510:	4630      	mov	r0, r6
 8001512:	f000 f973 	bl	80017fc <_isatty_r>
 8001516:	b128      	cbz	r0, 8001524 <__smakebuf_r+0x74>
 8001518:	89a3      	ldrh	r3, [r4, #12]
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	81a3      	strh	r3, [r4, #12]
 8001524:	89a0      	ldrh	r0, [r4, #12]
 8001526:	4305      	orrs	r5, r0
 8001528:	81a5      	strh	r5, [r4, #12]
 800152a:	e7cd      	b.n	80014c8 <__smakebuf_r+0x18>
 800152c:	080012bd 	.word	0x080012bd

08001530 <_free_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4605      	mov	r5, r0
 8001534:	2900      	cmp	r1, #0
 8001536:	d041      	beq.n	80015bc <_free_r+0x8c>
 8001538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800153c:	1f0c      	subs	r4, r1, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	bfb8      	it	lt
 8001542:	18e4      	addlt	r4, r4, r3
 8001544:	f000 f97c 	bl	8001840 <__malloc_lock>
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <_free_r+0x90>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	b933      	cbnz	r3, 800155c <_free_r+0x2c>
 800154e:	6063      	str	r3, [r4, #4]
 8001550:	6014      	str	r4, [r2, #0]
 8001552:	4628      	mov	r0, r5
 8001554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001558:	f000 b978 	b.w	800184c <__malloc_unlock>
 800155c:	42a3      	cmp	r3, r4
 800155e:	d908      	bls.n	8001572 <_free_r+0x42>
 8001560:	6820      	ldr	r0, [r4, #0]
 8001562:	1821      	adds	r1, r4, r0
 8001564:	428b      	cmp	r3, r1
 8001566:	bf01      	itttt	eq
 8001568:	6819      	ldreq	r1, [r3, #0]
 800156a:	685b      	ldreq	r3, [r3, #4]
 800156c:	1809      	addeq	r1, r1, r0
 800156e:	6021      	streq	r1, [r4, #0]
 8001570:	e7ed      	b.n	800154e <_free_r+0x1e>
 8001572:	461a      	mov	r2, r3
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	b10b      	cbz	r3, 800157c <_free_r+0x4c>
 8001578:	42a3      	cmp	r3, r4
 800157a:	d9fa      	bls.n	8001572 <_free_r+0x42>
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	1850      	adds	r0, r2, r1
 8001580:	42a0      	cmp	r0, r4
 8001582:	d10b      	bne.n	800159c <_free_r+0x6c>
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	4401      	add	r1, r0
 8001588:	1850      	adds	r0, r2, r1
 800158a:	4283      	cmp	r3, r0
 800158c:	6011      	str	r1, [r2, #0]
 800158e:	d1e0      	bne.n	8001552 <_free_r+0x22>
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	6053      	str	r3, [r2, #4]
 8001596:	4401      	add	r1, r0
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	e7da      	b.n	8001552 <_free_r+0x22>
 800159c:	d902      	bls.n	80015a4 <_free_r+0x74>
 800159e:	230c      	movs	r3, #12
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	e7d6      	b.n	8001552 <_free_r+0x22>
 80015a4:	6820      	ldr	r0, [r4, #0]
 80015a6:	1821      	adds	r1, r4, r0
 80015a8:	428b      	cmp	r3, r1
 80015aa:	bf04      	itt	eq
 80015ac:	6819      	ldreq	r1, [r3, #0]
 80015ae:	685b      	ldreq	r3, [r3, #4]
 80015b0:	6063      	str	r3, [r4, #4]
 80015b2:	bf04      	itt	eq
 80015b4:	1809      	addeq	r1, r1, r0
 80015b6:	6021      	streq	r1, [r4, #0]
 80015b8:	6054      	str	r4, [r2, #4]
 80015ba:	e7ca      	b.n	8001552 <_free_r+0x22>
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	200000e8 	.word	0x200000e8

080015c4 <sbrk_aligned>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	4e0e      	ldr	r6, [pc, #56]	; (8001600 <sbrk_aligned+0x3c>)
 80015c8:	460c      	mov	r4, r1
 80015ca:	6831      	ldr	r1, [r6, #0]
 80015cc:	4605      	mov	r5, r0
 80015ce:	b911      	cbnz	r1, 80015d6 <sbrk_aligned+0x12>
 80015d0:	f000 f88c 	bl	80016ec <_sbrk_r>
 80015d4:	6030      	str	r0, [r6, #0]
 80015d6:	4621      	mov	r1, r4
 80015d8:	4628      	mov	r0, r5
 80015da:	f000 f887 	bl	80016ec <_sbrk_r>
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	d00a      	beq.n	80015f8 <sbrk_aligned+0x34>
 80015e2:	1cc4      	adds	r4, r0, #3
 80015e4:	f024 0403 	bic.w	r4, r4, #3
 80015e8:	42a0      	cmp	r0, r4
 80015ea:	d007      	beq.n	80015fc <sbrk_aligned+0x38>
 80015ec:	1a21      	subs	r1, r4, r0
 80015ee:	4628      	mov	r0, r5
 80015f0:	f000 f87c 	bl	80016ec <_sbrk_r>
 80015f4:	3001      	adds	r0, #1
 80015f6:	d101      	bne.n	80015fc <sbrk_aligned+0x38>
 80015f8:	f04f 34ff 	mov.w	r4, #4294967295
 80015fc:	4620      	mov	r0, r4
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	200000ec 	.word	0x200000ec

08001604 <_malloc_r>:
 8001604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001608:	1ccd      	adds	r5, r1, #3
 800160a:	f025 0503 	bic.w	r5, r5, #3
 800160e:	3508      	adds	r5, #8
 8001610:	2d0c      	cmp	r5, #12
 8001612:	bf38      	it	cc
 8001614:	250c      	movcc	r5, #12
 8001616:	2d00      	cmp	r5, #0
 8001618:	4607      	mov	r7, r0
 800161a:	db01      	blt.n	8001620 <_malloc_r+0x1c>
 800161c:	42a9      	cmp	r1, r5
 800161e:	d905      	bls.n	800162c <_malloc_r+0x28>
 8001620:	230c      	movs	r3, #12
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	2600      	movs	r6, #0
 8001626:	4630      	mov	r0, r6
 8001628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800162c:	4e2e      	ldr	r6, [pc, #184]	; (80016e8 <_malloc_r+0xe4>)
 800162e:	f000 f907 	bl	8001840 <__malloc_lock>
 8001632:	6833      	ldr	r3, [r6, #0]
 8001634:	461c      	mov	r4, r3
 8001636:	bb34      	cbnz	r4, 8001686 <_malloc_r+0x82>
 8001638:	4629      	mov	r1, r5
 800163a:	4638      	mov	r0, r7
 800163c:	f7ff ffc2 	bl	80015c4 <sbrk_aligned>
 8001640:	1c43      	adds	r3, r0, #1
 8001642:	4604      	mov	r4, r0
 8001644:	d14d      	bne.n	80016e2 <_malloc_r+0xde>
 8001646:	6834      	ldr	r4, [r6, #0]
 8001648:	4626      	mov	r6, r4
 800164a:	2e00      	cmp	r6, #0
 800164c:	d140      	bne.n	80016d0 <_malloc_r+0xcc>
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	4631      	mov	r1, r6
 8001652:	4638      	mov	r0, r7
 8001654:	eb04 0803 	add.w	r8, r4, r3
 8001658:	f000 f848 	bl	80016ec <_sbrk_r>
 800165c:	4580      	cmp	r8, r0
 800165e:	d13a      	bne.n	80016d6 <_malloc_r+0xd2>
 8001660:	6821      	ldr	r1, [r4, #0]
 8001662:	3503      	adds	r5, #3
 8001664:	1a6d      	subs	r5, r5, r1
 8001666:	f025 0503 	bic.w	r5, r5, #3
 800166a:	3508      	adds	r5, #8
 800166c:	2d0c      	cmp	r5, #12
 800166e:	bf38      	it	cc
 8001670:	250c      	movcc	r5, #12
 8001672:	4629      	mov	r1, r5
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff ffa5 	bl	80015c4 <sbrk_aligned>
 800167a:	3001      	adds	r0, #1
 800167c:	d02b      	beq.n	80016d6 <_malloc_r+0xd2>
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	442b      	add	r3, r5
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	e00e      	b.n	80016a4 <_malloc_r+0xa0>
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	1b52      	subs	r2, r2, r5
 800168a:	d41e      	bmi.n	80016ca <_malloc_r+0xc6>
 800168c:	2a0b      	cmp	r2, #11
 800168e:	d916      	bls.n	80016be <_malloc_r+0xba>
 8001690:	1961      	adds	r1, r4, r5
 8001692:	42a3      	cmp	r3, r4
 8001694:	6025      	str	r5, [r4, #0]
 8001696:	bf18      	it	ne
 8001698:	6059      	strne	r1, [r3, #4]
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	bf08      	it	eq
 800169e:	6031      	streq	r1, [r6, #0]
 80016a0:	5162      	str	r2, [r4, r5]
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	4638      	mov	r0, r7
 80016a6:	f104 060b 	add.w	r6, r4, #11
 80016aa:	f000 f8cf 	bl	800184c <__malloc_unlock>
 80016ae:	f026 0607 	bic.w	r6, r6, #7
 80016b2:	1d23      	adds	r3, r4, #4
 80016b4:	1af2      	subs	r2, r6, r3
 80016b6:	d0b6      	beq.n	8001626 <_malloc_r+0x22>
 80016b8:	1b9b      	subs	r3, r3, r6
 80016ba:	50a3      	str	r3, [r4, r2]
 80016bc:	e7b3      	b.n	8001626 <_malloc_r+0x22>
 80016be:	6862      	ldr	r2, [r4, #4]
 80016c0:	42a3      	cmp	r3, r4
 80016c2:	bf0c      	ite	eq
 80016c4:	6032      	streq	r2, [r6, #0]
 80016c6:	605a      	strne	r2, [r3, #4]
 80016c8:	e7ec      	b.n	80016a4 <_malloc_r+0xa0>
 80016ca:	4623      	mov	r3, r4
 80016cc:	6864      	ldr	r4, [r4, #4]
 80016ce:	e7b2      	b.n	8001636 <_malloc_r+0x32>
 80016d0:	4634      	mov	r4, r6
 80016d2:	6876      	ldr	r6, [r6, #4]
 80016d4:	e7b9      	b.n	800164a <_malloc_r+0x46>
 80016d6:	230c      	movs	r3, #12
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4638      	mov	r0, r7
 80016dc:	f000 f8b6 	bl	800184c <__malloc_unlock>
 80016e0:	e7a1      	b.n	8001626 <_malloc_r+0x22>
 80016e2:	6025      	str	r5, [r4, #0]
 80016e4:	e7de      	b.n	80016a4 <_malloc_r+0xa0>
 80016e6:	bf00      	nop
 80016e8:	200000e8 	.word	0x200000e8

080016ec <_sbrk_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4d06      	ldr	r5, [pc, #24]	; (8001708 <_sbrk_r+0x1c>)
 80016f0:	2300      	movs	r3, #0
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	602b      	str	r3, [r5, #0]
 80016f8:	f7ff fab2 	bl	8000c60 <_sbrk>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d102      	bne.n	8001706 <_sbrk_r+0x1a>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	b103      	cbz	r3, 8001706 <_sbrk_r+0x1a>
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	200000f0 	.word	0x200000f0

0800170c <__sread>:
 800170c:	b510      	push	{r4, lr}
 800170e:	460c      	mov	r4, r1
 8001710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001714:	f000 f8a0 	bl	8001858 <_read_r>
 8001718:	2800      	cmp	r0, #0
 800171a:	bfab      	itete	ge
 800171c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800171e:	89a3      	ldrhlt	r3, [r4, #12]
 8001720:	181b      	addge	r3, r3, r0
 8001722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001726:	bfac      	ite	ge
 8001728:	6563      	strge	r3, [r4, #84]	; 0x54
 800172a:	81a3      	strhlt	r3, [r4, #12]
 800172c:	bd10      	pop	{r4, pc}

0800172e <__swrite>:
 800172e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001732:	461f      	mov	r7, r3
 8001734:	898b      	ldrh	r3, [r1, #12]
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	4605      	mov	r5, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4616      	mov	r6, r2
 800173e:	d505      	bpl.n	800174c <__swrite+0x1e>
 8001740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001744:	2302      	movs	r3, #2
 8001746:	2200      	movs	r2, #0
 8001748:	f000 f868 	bl	800181c <_lseek_r>
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001756:	81a3      	strh	r3, [r4, #12]
 8001758:	4632      	mov	r2, r6
 800175a:	463b      	mov	r3, r7
 800175c:	4628      	mov	r0, r5
 800175e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001762:	f000 b817 	b.w	8001794 <_write_r>

08001766 <__sseek>:
 8001766:	b510      	push	{r4, lr}
 8001768:	460c      	mov	r4, r1
 800176a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800176e:	f000 f855 	bl	800181c <_lseek_r>
 8001772:	1c43      	adds	r3, r0, #1
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	bf15      	itete	ne
 8001778:	6560      	strne	r0, [r4, #84]	; 0x54
 800177a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800177e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001782:	81a3      	strheq	r3, [r4, #12]
 8001784:	bf18      	it	ne
 8001786:	81a3      	strhne	r3, [r4, #12]
 8001788:	bd10      	pop	{r4, pc}

0800178a <__sclose>:
 800178a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800178e:	f000 b813 	b.w	80017b8 <_close_r>
	...

08001794 <_write_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	4d07      	ldr	r5, [pc, #28]	; (80017b4 <_write_r+0x20>)
 8001798:	4604      	mov	r4, r0
 800179a:	4608      	mov	r0, r1
 800179c:	4611      	mov	r1, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	602a      	str	r2, [r5, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7ff fa0f 	bl	8000bc6 <_write>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	d102      	bne.n	80017b2 <_write_r+0x1e>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	b103      	cbz	r3, 80017b2 <_write_r+0x1e>
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	200000f0 	.word	0x200000f0

080017b8 <_close_r>:
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4d06      	ldr	r5, [pc, #24]	; (80017d4 <_close_r+0x1c>)
 80017bc:	2300      	movs	r3, #0
 80017be:	4604      	mov	r4, r0
 80017c0:	4608      	mov	r0, r1
 80017c2:	602b      	str	r3, [r5, #0]
 80017c4:	f7ff fa1b 	bl	8000bfe <_close>
 80017c8:	1c43      	adds	r3, r0, #1
 80017ca:	d102      	bne.n	80017d2 <_close_r+0x1a>
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	b103      	cbz	r3, 80017d2 <_close_r+0x1a>
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	bd38      	pop	{r3, r4, r5, pc}
 80017d4:	200000f0 	.word	0x200000f0

080017d8 <_fstat_r>:
 80017d8:	b538      	push	{r3, r4, r5, lr}
 80017da:	4d07      	ldr	r5, [pc, #28]	; (80017f8 <_fstat_r+0x20>)
 80017dc:	2300      	movs	r3, #0
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	602b      	str	r3, [r5, #0]
 80017e6:	f7ff fa15 	bl	8000c14 <_fstat>
 80017ea:	1c43      	adds	r3, r0, #1
 80017ec:	d102      	bne.n	80017f4 <_fstat_r+0x1c>
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	b103      	cbz	r3, 80017f4 <_fstat_r+0x1c>
 80017f2:	6023      	str	r3, [r4, #0]
 80017f4:	bd38      	pop	{r3, r4, r5, pc}
 80017f6:	bf00      	nop
 80017f8:	200000f0 	.word	0x200000f0

080017fc <_isatty_r>:
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4d06      	ldr	r5, [pc, #24]	; (8001818 <_isatty_r+0x1c>)
 8001800:	2300      	movs	r3, #0
 8001802:	4604      	mov	r4, r0
 8001804:	4608      	mov	r0, r1
 8001806:	602b      	str	r3, [r5, #0]
 8001808:	f7ff fa13 	bl	8000c32 <_isatty>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d102      	bne.n	8001816 <_isatty_r+0x1a>
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	b103      	cbz	r3, 8001816 <_isatty_r+0x1a>
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	bd38      	pop	{r3, r4, r5, pc}
 8001818:	200000f0 	.word	0x200000f0

0800181c <_lseek_r>:
 800181c:	b538      	push	{r3, r4, r5, lr}
 800181e:	4d07      	ldr	r5, [pc, #28]	; (800183c <_lseek_r+0x20>)
 8001820:	4604      	mov	r4, r0
 8001822:	4608      	mov	r0, r1
 8001824:	4611      	mov	r1, r2
 8001826:	2200      	movs	r2, #0
 8001828:	602a      	str	r2, [r5, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	f7ff fa0b 	bl	8000c46 <_lseek>
 8001830:	1c43      	adds	r3, r0, #1
 8001832:	d102      	bne.n	800183a <_lseek_r+0x1e>
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	b103      	cbz	r3, 800183a <_lseek_r+0x1e>
 8001838:	6023      	str	r3, [r4, #0]
 800183a:	bd38      	pop	{r3, r4, r5, pc}
 800183c:	200000f0 	.word	0x200000f0

08001840 <__malloc_lock>:
 8001840:	4801      	ldr	r0, [pc, #4]	; (8001848 <__malloc_lock+0x8>)
 8001842:	f7ff be0d 	b.w	8001460 <__retarget_lock_acquire_recursive>
 8001846:	bf00      	nop
 8001848:	200000e4 	.word	0x200000e4

0800184c <__malloc_unlock>:
 800184c:	4801      	ldr	r0, [pc, #4]	; (8001854 <__malloc_unlock+0x8>)
 800184e:	f7ff be08 	b.w	8001462 <__retarget_lock_release_recursive>
 8001852:	bf00      	nop
 8001854:	200000e4 	.word	0x200000e4

08001858 <_read_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4d07      	ldr	r5, [pc, #28]	; (8001878 <_read_r+0x20>)
 800185c:	4604      	mov	r4, r0
 800185e:	4608      	mov	r0, r1
 8001860:	4611      	mov	r1, r2
 8001862:	2200      	movs	r2, #0
 8001864:	602a      	str	r2, [r5, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	f7ff f990 	bl	8000b8c <_read>
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	d102      	bne.n	8001876 <_read_r+0x1e>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	b103      	cbz	r3, 8001876 <_read_r+0x1e>
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	bd38      	pop	{r3, r4, r5, pc}
 8001878:	200000f0 	.word	0x200000f0

0800187c <_init>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	bf00      	nop
 8001880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001882:	bc08      	pop	{r3}
 8001884:	469e      	mov	lr, r3
 8001886:	4770      	bx	lr

08001888 <_fini>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr
