
Task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800117c  0800117c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800117c  0800117c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800117c  0800117c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001180  08001180  00011180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000074  080011f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080011f8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001207  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000516  00000000  00000000  000212a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000217c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c8c  00000000  00000000  00021b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000197c  00000000  00000000  00024794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097f6  00000000  00000000  00026110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c6c  00000000  00000000  0002f958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001070 	.word	0x08001070

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08001070 	.word	0x08001070

080001d8 <pinMode>:
volatile gpioClockEnable_t *const pRCC_AHB1ENR =
		(gpioClockEnable_t*) RCC_AHB1ENR;
volatile pinMode_t *const pGPIOA_MODE = (pinMode_t*) GPIOA_MODE;
volatile outputData_t *const pGPIOA_OUT = (outputData_t*) GPIOA_OUT;
void pinMode(pin_e pin, mode_e mode)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	pRCC_AHB1ENR->GPIOA_EN = 1;
 80001e8:	4a24      	ldr	r2, [pc, #144]	; (800027c <pinMode+0xa4>)
 80001ea:	6813      	ldr	r3, [r2, #0]
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6013      	str	r3, [r2, #0]
	if (pin == 0)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d109      	bne.n	800020c <pinMode+0x34>
	{
		pGPIOA_MODE->pin0 = mode;
 80001f8:	4a21      	ldr	r2, [pc, #132]	; (8000280 <pinMode+0xa8>)
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	f003 0303 	and.w	r3, r3, #3
 8000200:	b2d9      	uxtb	r1, r3
 8000202:	6813      	ldr	r3, [r2, #0]
 8000204:	f361 0301 	bfi	r3, r1, #0, #2
 8000208:	6013      	str	r3, [r2, #0]
	else if (pin == 4)
	{

		pGPIOA_MODE->pin4 = mode;
	}
}
 800020a:	e032      	b.n	8000272 <pinMode+0x9a>
	else if (pin == 1)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d109      	bne.n	8000226 <pinMode+0x4e>
		pGPIOA_MODE->pin1 = mode;
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <pinMode+0xa8>)
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	f003 0303 	and.w	r3, r3, #3
 800021a:	b2d9      	uxtb	r1, r3
 800021c:	6813      	ldr	r3, [r2, #0]
 800021e:	f361 0383 	bfi	r3, r1, #2, #2
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	e025      	b.n	8000272 <pinMode+0x9a>
	else if (pin == 2)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d109      	bne.n	8000240 <pinMode+0x68>
		pGPIOA_MODE->pin2 = mode;
 800022c:	4a14      	ldr	r2, [pc, #80]	; (8000280 <pinMode+0xa8>)
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	f003 0303 	and.w	r3, r3, #3
 8000234:	b2d9      	uxtb	r1, r3
 8000236:	6813      	ldr	r3, [r2, #0]
 8000238:	f361 1305 	bfi	r3, r1, #4, #2
 800023c:	6013      	str	r3, [r2, #0]
}
 800023e:	e018      	b.n	8000272 <pinMode+0x9a>
	else if (pin == 3)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d109      	bne.n	800025a <pinMode+0x82>
		pGPIOA_MODE->pin3 = mode;
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <pinMode+0xa8>)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	f003 0303 	and.w	r3, r3, #3
 800024e:	b2d9      	uxtb	r1, r3
 8000250:	6813      	ldr	r3, [r2, #0]
 8000252:	f361 1387 	bfi	r3, r1, #6, #2
 8000256:	6013      	str	r3, [r2, #0]
}
 8000258:	e00b      	b.n	8000272 <pinMode+0x9a>
	else if (pin == 4)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b04      	cmp	r3, #4
 800025e:	d108      	bne.n	8000272 <pinMode+0x9a>
		pGPIOA_MODE->pin4 = mode;
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <pinMode+0xa8>)
 8000262:	79bb      	ldrb	r3, [r7, #6]
 8000264:	f003 0303 	and.w	r3, r3, #3
 8000268:	b2d9      	uxtb	r1, r3
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	f361 2309 	bfi	r3, r1, #8, #2
 8000270:	6013      	str	r3, [r2, #0]
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40023830 	.word	0x40023830
 8000280:	40020000 	.word	0x40020000

08000284 <pinOutput>:

void pinOutput(pin_e pin, out_e out)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
	if (pin == 0)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d109      	bne.n	80002ae <pinOutput+0x2a>
	{
		pGPIOA_OUT->pin0 = out;
 800029a:	4a21      	ldr	r2, [pc, #132]	; (8000320 <pinOutput+0x9c>)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	b2d9      	uxtb	r1, r3
 80002a4:	6813      	ldr	r3, [r2, #0]
 80002a6:	f361 0300 	bfi	r3, r1, #0, #1
 80002aa:	6013      	str	r3, [r2, #0]
	else if (pin == 4)
	{

		pGPIOA_OUT->pin4 = out;
	}
}
 80002ac:	e032      	b.n	8000314 <pinOutput+0x90>
	else if (pin == 1)
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d109      	bne.n	80002c8 <pinOutput+0x44>
		pGPIOA_OUT->pin1 = out;
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <pinOutput+0x9c>)
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b2d9      	uxtb	r1, r3
 80002be:	6813      	ldr	r3, [r2, #0]
 80002c0:	f361 0341 	bfi	r3, r1, #1, #1
 80002c4:	6013      	str	r3, [r2, #0]
}
 80002c6:	e025      	b.n	8000314 <pinOutput+0x90>
	else if (pin == 2)
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d109      	bne.n	80002e2 <pinOutput+0x5e>
		pGPIOA_OUT->pin2 = out;
 80002ce:	4a14      	ldr	r2, [pc, #80]	; (8000320 <pinOutput+0x9c>)
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2d9      	uxtb	r1, r3
 80002d8:	6813      	ldr	r3, [r2, #0]
 80002da:	f361 0382 	bfi	r3, r1, #2, #1
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	e018      	b.n	8000314 <pinOutput+0x90>
	else if (pin == 3)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d109      	bne.n	80002fc <pinOutput+0x78>
		pGPIOA_OUT->pin3 = out;
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <pinOutput+0x9c>)
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	b2d9      	uxtb	r1, r3
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80002f8:	6013      	str	r3, [r2, #0]
}
 80002fa:	e00b      	b.n	8000314 <pinOutput+0x90>
	else if (pin == 4)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d108      	bne.n	8000314 <pinOutput+0x90>
		pGPIOA_OUT->pin4 = out;
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <pinOutput+0x9c>)
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	b2d9      	uxtb	r1, r3
 800030c:	6813      	ldr	r3, [r2, #0]
 800030e:	f361 1304 	bfi	r3, r1, #4, #1
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020014 	.word	0x40020014

08000324 <main>:
void systick_init();
uint32_t getPSP();
void store_psp_value(uint32_t current_pspValue);

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	pinOutput(2, high);
	pinOutput(3, high);
	pinOutput(4, high);
#endif
	/* Loop forever */
	for (uint8_t i=0;i<7;i++)
 800032a:	2300      	movs	r3, #0
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	e00c      	b.n	800034a <main+0x26>
	{
		pinMode(i, output);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2101      	movs	r1, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff4f 	bl	80001d8 <pinMode>
		pinOutput(i, high);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2101      	movs	r1, #1
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffa0 	bl	8000284 <pinOutput>
	for (uint8_t i=0;i<7;i++)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	3301      	adds	r3, #1
 8000348:	71fb      	strb	r3, [r7, #7]
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b06      	cmp	r3, #6
 800034e:	d9ef      	bls.n	8000330 <main+0xc>
	}
	for(;;);
 8000350:	e7fe      	b.n	8000350 <main+0x2c>
	...

08000354 <MemManage_Handler>:
	*pSHCRS |= (1 << 16); //memory fault
	*pSHCRS |= (1 << 17); //bus fault
	*pSHCRS |= (1 << 18); //usage fault
}
void MemManage_Handler()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	printf("In the memory fault\n");
 8000358:	4802      	ldr	r0, [pc, #8]	; (8000364 <MemManage_Handler+0x10>)
 800035a:	f000 f9ff 	bl	800075c <puts>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	080010c8 	.word	0x080010c8

08000368 <BusFault_Handler>:

void BusFault_Handler()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	printf("In the bus fault\n");
 800036c:	4802      	ldr	r0, [pc, #8]	; (8000378 <BusFault_Handler+0x10>)
 800036e:	f000 f9f5 	bl	800075c <puts>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	080010dc 	.word	0x080010dc

0800037c <HardFault_Handler>:
void HardFault_Handler()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	printf("In the hard fault\n");
 8000380:	4802      	ldr	r0, [pc, #8]	; (800038c <HardFault_Handler+0x10>)
 8000382:	f000 f9eb 	bl	800075c <puts>
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	080010f0 	.word	0x080010f0

08000390 <UsageFault_Handler>:
void UsageFault_Handler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	printf("In the usage fault\n");
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <UsageFault_Handler+0x10>)
 8000396:	f000 f9e1 	bl	800075c <puts>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	08001104 	.word	0x08001104

080003a4 <getPSP>:

uint32_t getPSP()
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	return psp_of_task[currentTask]; //value will be returned in R0
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <getPSP+0x18>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <getPSP+0x1c>)
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	20000090 	.word	0x20000090
 80003c0:	20000000 	.word	0x20000000

080003c4 <store_psp_value>:

void store_psp_value(uint32_t current_pspValue)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	psp_of_task[currentTask] = current_pspValue;
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <store_psp_value+0x20>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4905      	ldr	r1, [pc, #20]	; (80003e8 <store_psp_value+0x24>)
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000090 	.word	0x20000090
 80003e8:	20000000 	.word	0x20000000

080003ec <update_next_task>:

void update_next_task()
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	currentTask++;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <update_next_task+0x24>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <update_next_task+0x24>)
 80003f8:	6013      	str	r3, [r2, #0]
	currentTask %= MAX_TASK;
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <update_next_task+0x24>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0303 	and.w	r3, r3, #3
 8000402:	4a03      	ldr	r2, [pc, #12]	; (8000410 <update_next_task+0x24>)
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000090 	.word	0x20000090

08000414 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler()
{
	//store the context of current task
	//1.get the current psp value
	__asm volatile("MRS R0,PSP");
 8000414:	f3ef 8009 	mrs	r0, PSP

	//2.store r4-r11 into stack using psp value
	__asm volatile("STMDB R0!,{R4-R11}");
 8000418:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 800041c:	b500      	push	{lr}
	//save LR before change
	//store the current PSP value
	__asm volatile("BL store_psp_value");
 800041e:	f7ff ffd1 	bl	80003c4 <store_psp_value>

	//Retrieve the context of next task
	//1.Decide the next task to run
	__asm volatile("BL update_next_task");
 8000422:	f7ff ffe3 	bl	80003ec <update_next_task>

	//2.get its PSP value
	__asm volatile("BL getPSP");
 8000426:	f7ff ffbd 	bl	80003a4 <getPSP>
	//PSP value in R0

	//3.Using the PSP value retrieve the SF2(R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");
 800042a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4.update PSP
	__asm volatile("MSR PSP,R0");
 800042e:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000432:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000436:	4770      	bx	lr

}
 8000438:	bf00      	nop
	...

0800043c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <ITM_SendChar+0x44>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <ITM_SendChar+0x44>)
 800044c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000450:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <ITM_SendChar+0x48>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <ITM_SendChar+0x48>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800045e:	bf00      	nop
 8000460:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f8      	beq.n	8000460 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800046e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	e000edfc 	.word	0xe000edfc
 8000484:	e0000e00 	.word	0xe0000e00

08000488 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	e00a      	b.n	80004b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800049a:	f3af 8000 	nop.w
 800049e:	4601      	mov	r1, r0
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	60ba      	str	r2, [r7, #8]
 80004a6:	b2ca      	uxtb	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	dbf0      	blt.n	800049a <_read+0x12>
	}

return len;
 80004b8:	687b      	ldr	r3, [r7, #4]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b086      	sub	sp, #24
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	e009      	b.n	80004e8 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	60ba      	str	r2, [r7, #8]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ffad 	bl	800043c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf1      	blt.n	80004d4 <_write+0x12>
	}
	return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_close>:

int _close(int file)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
	return -1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000520:	605a      	str	r2, [r3, #4]
	return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <_isatty>:

int _isatty(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
	...

0800055c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <_sbrk+0x5c>)
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <_sbrk+0x60>)
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d102      	bne.n	800057e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <_sbrk+0x64>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <_sbrk+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	d207      	bcs.n	800059c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800058c:	f000 f846 	bl	800061c <__errno>
 8000590:	4603      	mov	r3, r0
 8000592:	220c      	movs	r2, #12
 8000594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	e009      	b.n	80005b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <_sbrk+0x64>)
 80005ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20020000 	.word	0x20020000
 80005bc:	00000400 	.word	0x00000400
 80005c0:	20000094 	.word	0x20000094
 80005c4:	200000a8 	.word	0x200000a8

080005c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LoopForever+0xe>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <LoopForever+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f6:	f000 f817 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fe93 	bl	8000324 <main>

080005fe <LoopForever>:

LoopForever:
    b LoopForever
 80005fe:	e7fe      	b.n	80005fe <LoopForever>
  ldr   r0, =_estack
 8000600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800060c:	08001184 	.word	0x08001184
  ldr r2, =_sbss
 8000610:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000614:	200000a8 	.word	0x200000a8

08000618 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC_IRQHandler>
	...

0800061c <__errno>:
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <__errno+0x8>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000010 	.word	0x20000010

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4d0d      	ldr	r5, [pc, #52]	; (8000660 <__libc_init_array+0x38>)
 800062c:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	2600      	movs	r6, #0
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	4d0b      	ldr	r5, [pc, #44]	; (8000668 <__libc_init_array+0x40>)
 800063a:	4c0c      	ldr	r4, [pc, #48]	; (800066c <__libc_init_array+0x44>)
 800063c:	f000 fd18 	bl	8001070 <_init>
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	10a4      	asrs	r4, r4, #2
 8000644:	2600      	movs	r6, #0
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	0800117c 	.word	0x0800117c
 8000664:	0800117c 	.word	0x0800117c
 8000668:	0800117c 	.word	0x0800117c
 800066c:	08001180 	.word	0x08001180

08000670 <memset>:
 8000670:	4402      	add	r2, r0
 8000672:	4603      	mov	r3, r0
 8000674:	4293      	cmp	r3, r2
 8000676:	d100      	bne.n	800067a <memset+0xa>
 8000678:	4770      	bx	lr
 800067a:	f803 1b01 	strb.w	r1, [r3], #1
 800067e:	e7f9      	b.n	8000674 <memset+0x4>

08000680 <_puts_r>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	460e      	mov	r6, r1
 8000684:	4605      	mov	r5, r0
 8000686:	b118      	cbz	r0, 8000690 <_puts_r+0x10>
 8000688:	6983      	ldr	r3, [r0, #24]
 800068a:	b90b      	cbnz	r3, 8000690 <_puts_r+0x10>
 800068c:	f000 fa44 	bl	8000b18 <__sinit>
 8000690:	69ab      	ldr	r3, [r5, #24]
 8000692:	68ac      	ldr	r4, [r5, #8]
 8000694:	b913      	cbnz	r3, 800069c <_puts_r+0x1c>
 8000696:	4628      	mov	r0, r5
 8000698:	f000 fa3e 	bl	8000b18 <__sinit>
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <_puts_r+0xd0>)
 800069e:	429c      	cmp	r4, r3
 80006a0:	d120      	bne.n	80006e4 <_puts_r+0x64>
 80006a2:	686c      	ldr	r4, [r5, #4]
 80006a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006a6:	07db      	lsls	r3, r3, #31
 80006a8:	d405      	bmi.n	80006b6 <_puts_r+0x36>
 80006aa:	89a3      	ldrh	r3, [r4, #12]
 80006ac:	0598      	lsls	r0, r3, #22
 80006ae:	d402      	bmi.n	80006b6 <_puts_r+0x36>
 80006b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006b2:	f000 facf 	bl	8000c54 <__retarget_lock_acquire_recursive>
 80006b6:	89a3      	ldrh	r3, [r4, #12]
 80006b8:	0719      	lsls	r1, r3, #28
 80006ba:	d51d      	bpl.n	80006f8 <_puts_r+0x78>
 80006bc:	6923      	ldr	r3, [r4, #16]
 80006be:	b1db      	cbz	r3, 80006f8 <_puts_r+0x78>
 80006c0:	3e01      	subs	r6, #1
 80006c2:	68a3      	ldr	r3, [r4, #8]
 80006c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006c8:	3b01      	subs	r3, #1
 80006ca:	60a3      	str	r3, [r4, #8]
 80006cc:	bb39      	cbnz	r1, 800071e <_puts_r+0x9e>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da38      	bge.n	8000744 <_puts_r+0xc4>
 80006d2:	4622      	mov	r2, r4
 80006d4:	210a      	movs	r1, #10
 80006d6:	4628      	mov	r0, r5
 80006d8:	f000 f848 	bl	800076c <__swbuf_r>
 80006dc:	3001      	adds	r0, #1
 80006de:	d011      	beq.n	8000704 <_puts_r+0x84>
 80006e0:	250a      	movs	r5, #10
 80006e2:	e011      	b.n	8000708 <_puts_r+0x88>
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <_puts_r+0xd4>)
 80006e6:	429c      	cmp	r4, r3
 80006e8:	d101      	bne.n	80006ee <_puts_r+0x6e>
 80006ea:	68ac      	ldr	r4, [r5, #8]
 80006ec:	e7da      	b.n	80006a4 <_puts_r+0x24>
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <_puts_r+0xd8>)
 80006f0:	429c      	cmp	r4, r3
 80006f2:	bf08      	it	eq
 80006f4:	68ec      	ldreq	r4, [r5, #12]
 80006f6:	e7d5      	b.n	80006a4 <_puts_r+0x24>
 80006f8:	4621      	mov	r1, r4
 80006fa:	4628      	mov	r0, r5
 80006fc:	f000 f888 	bl	8000810 <__swsetup_r>
 8000700:	2800      	cmp	r0, #0
 8000702:	d0dd      	beq.n	80006c0 <_puts_r+0x40>
 8000704:	f04f 35ff 	mov.w	r5, #4294967295
 8000708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800070a:	07da      	lsls	r2, r3, #31
 800070c:	d405      	bmi.n	800071a <_puts_r+0x9a>
 800070e:	89a3      	ldrh	r3, [r4, #12]
 8000710:	059b      	lsls	r3, r3, #22
 8000712:	d402      	bmi.n	800071a <_puts_r+0x9a>
 8000714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000716:	f000 fa9e 	bl	8000c56 <__retarget_lock_release_recursive>
 800071a:	4628      	mov	r0, r5
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	2b00      	cmp	r3, #0
 8000720:	da04      	bge.n	800072c <_puts_r+0xac>
 8000722:	69a2      	ldr	r2, [r4, #24]
 8000724:	429a      	cmp	r2, r3
 8000726:	dc06      	bgt.n	8000736 <_puts_r+0xb6>
 8000728:	290a      	cmp	r1, #10
 800072a:	d004      	beq.n	8000736 <_puts_r+0xb6>
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	6022      	str	r2, [r4, #0]
 8000732:	7019      	strb	r1, [r3, #0]
 8000734:	e7c5      	b.n	80006c2 <_puts_r+0x42>
 8000736:	4622      	mov	r2, r4
 8000738:	4628      	mov	r0, r5
 800073a:	f000 f817 	bl	800076c <__swbuf_r>
 800073e:	3001      	adds	r0, #1
 8000740:	d1bf      	bne.n	80006c2 <_puts_r+0x42>
 8000742:	e7df      	b.n	8000704 <_puts_r+0x84>
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	250a      	movs	r5, #10
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	6022      	str	r2, [r4, #0]
 800074c:	701d      	strb	r5, [r3, #0]
 800074e:	e7db      	b.n	8000708 <_puts_r+0x88>
 8000750:	0800113c 	.word	0x0800113c
 8000754:	0800115c 	.word	0x0800115c
 8000758:	0800111c 	.word	0x0800111c

0800075c <puts>:
 800075c:	4b02      	ldr	r3, [pc, #8]	; (8000768 <puts+0xc>)
 800075e:	4601      	mov	r1, r0
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	f7ff bf8d 	b.w	8000680 <_puts_r>
 8000766:	bf00      	nop
 8000768:	20000010 	.word	0x20000010

0800076c <__swbuf_r>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	460e      	mov	r6, r1
 8000770:	4614      	mov	r4, r2
 8000772:	4605      	mov	r5, r0
 8000774:	b118      	cbz	r0, 800077e <__swbuf_r+0x12>
 8000776:	6983      	ldr	r3, [r0, #24]
 8000778:	b90b      	cbnz	r3, 800077e <__swbuf_r+0x12>
 800077a:	f000 f9cd 	bl	8000b18 <__sinit>
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <__swbuf_r+0x98>)
 8000780:	429c      	cmp	r4, r3
 8000782:	d12b      	bne.n	80007dc <__swbuf_r+0x70>
 8000784:	686c      	ldr	r4, [r5, #4]
 8000786:	69a3      	ldr	r3, [r4, #24]
 8000788:	60a3      	str	r3, [r4, #8]
 800078a:	89a3      	ldrh	r3, [r4, #12]
 800078c:	071a      	lsls	r2, r3, #28
 800078e:	d52f      	bpl.n	80007f0 <__swbuf_r+0x84>
 8000790:	6923      	ldr	r3, [r4, #16]
 8000792:	b36b      	cbz	r3, 80007f0 <__swbuf_r+0x84>
 8000794:	6923      	ldr	r3, [r4, #16]
 8000796:	6820      	ldr	r0, [r4, #0]
 8000798:	1ac0      	subs	r0, r0, r3
 800079a:	6963      	ldr	r3, [r4, #20]
 800079c:	b2f6      	uxtb	r6, r6
 800079e:	4283      	cmp	r3, r0
 80007a0:	4637      	mov	r7, r6
 80007a2:	dc04      	bgt.n	80007ae <__swbuf_r+0x42>
 80007a4:	4621      	mov	r1, r4
 80007a6:	4628      	mov	r0, r5
 80007a8:	f000 f922 	bl	80009f0 <_fflush_r>
 80007ac:	bb30      	cbnz	r0, 80007fc <__swbuf_r+0x90>
 80007ae:	68a3      	ldr	r3, [r4, #8]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60a3      	str	r3, [r4, #8]
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	6022      	str	r2, [r4, #0]
 80007ba:	701e      	strb	r6, [r3, #0]
 80007bc:	6963      	ldr	r3, [r4, #20]
 80007be:	3001      	adds	r0, #1
 80007c0:	4283      	cmp	r3, r0
 80007c2:	d004      	beq.n	80007ce <__swbuf_r+0x62>
 80007c4:	89a3      	ldrh	r3, [r4, #12]
 80007c6:	07db      	lsls	r3, r3, #31
 80007c8:	d506      	bpl.n	80007d8 <__swbuf_r+0x6c>
 80007ca:	2e0a      	cmp	r6, #10
 80007cc:	d104      	bne.n	80007d8 <__swbuf_r+0x6c>
 80007ce:	4621      	mov	r1, r4
 80007d0:	4628      	mov	r0, r5
 80007d2:	f000 f90d 	bl	80009f0 <_fflush_r>
 80007d6:	b988      	cbnz	r0, 80007fc <__swbuf_r+0x90>
 80007d8:	4638      	mov	r0, r7
 80007da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <__swbuf_r+0x9c>)
 80007de:	429c      	cmp	r4, r3
 80007e0:	d101      	bne.n	80007e6 <__swbuf_r+0x7a>
 80007e2:	68ac      	ldr	r4, [r5, #8]
 80007e4:	e7cf      	b.n	8000786 <__swbuf_r+0x1a>
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <__swbuf_r+0xa0>)
 80007e8:	429c      	cmp	r4, r3
 80007ea:	bf08      	it	eq
 80007ec:	68ec      	ldreq	r4, [r5, #12]
 80007ee:	e7ca      	b.n	8000786 <__swbuf_r+0x1a>
 80007f0:	4621      	mov	r1, r4
 80007f2:	4628      	mov	r0, r5
 80007f4:	f000 f80c 	bl	8000810 <__swsetup_r>
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d0cb      	beq.n	8000794 <__swbuf_r+0x28>
 80007fc:	f04f 37ff 	mov.w	r7, #4294967295
 8000800:	e7ea      	b.n	80007d8 <__swbuf_r+0x6c>
 8000802:	bf00      	nop
 8000804:	0800113c 	.word	0x0800113c
 8000808:	0800115c 	.word	0x0800115c
 800080c:	0800111c 	.word	0x0800111c

08000810 <__swsetup_r>:
 8000810:	4b32      	ldr	r3, [pc, #200]	; (80008dc <__swsetup_r+0xcc>)
 8000812:	b570      	push	{r4, r5, r6, lr}
 8000814:	681d      	ldr	r5, [r3, #0]
 8000816:	4606      	mov	r6, r0
 8000818:	460c      	mov	r4, r1
 800081a:	b125      	cbz	r5, 8000826 <__swsetup_r+0x16>
 800081c:	69ab      	ldr	r3, [r5, #24]
 800081e:	b913      	cbnz	r3, 8000826 <__swsetup_r+0x16>
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f979 	bl	8000b18 <__sinit>
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <__swsetup_r+0xd0>)
 8000828:	429c      	cmp	r4, r3
 800082a:	d10f      	bne.n	800084c <__swsetup_r+0x3c>
 800082c:	686c      	ldr	r4, [r5, #4]
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000834:	0719      	lsls	r1, r3, #28
 8000836:	d42c      	bmi.n	8000892 <__swsetup_r+0x82>
 8000838:	06dd      	lsls	r5, r3, #27
 800083a:	d411      	bmi.n	8000860 <__swsetup_r+0x50>
 800083c:	2309      	movs	r3, #9
 800083e:	6033      	str	r3, [r6, #0]
 8000840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000844:	81a3      	strh	r3, [r4, #12]
 8000846:	f04f 30ff 	mov.w	r0, #4294967295
 800084a:	e03e      	b.n	80008ca <__swsetup_r+0xba>
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <__swsetup_r+0xd4>)
 800084e:	429c      	cmp	r4, r3
 8000850:	d101      	bne.n	8000856 <__swsetup_r+0x46>
 8000852:	68ac      	ldr	r4, [r5, #8]
 8000854:	e7eb      	b.n	800082e <__swsetup_r+0x1e>
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <__swsetup_r+0xd8>)
 8000858:	429c      	cmp	r4, r3
 800085a:	bf08      	it	eq
 800085c:	68ec      	ldreq	r4, [r5, #12]
 800085e:	e7e6      	b.n	800082e <__swsetup_r+0x1e>
 8000860:	0758      	lsls	r0, r3, #29
 8000862:	d512      	bpl.n	800088a <__swsetup_r+0x7a>
 8000864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000866:	b141      	cbz	r1, 800087a <__swsetup_r+0x6a>
 8000868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800086c:	4299      	cmp	r1, r3
 800086e:	d002      	beq.n	8000876 <__swsetup_r+0x66>
 8000870:	4630      	mov	r0, r6
 8000872:	f000 fa57 	bl	8000d24 <_free_r>
 8000876:	2300      	movs	r3, #0
 8000878:	6363      	str	r3, [r4, #52]	; 0x34
 800087a:	89a3      	ldrh	r3, [r4, #12]
 800087c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000880:	81a3      	strh	r3, [r4, #12]
 8000882:	2300      	movs	r3, #0
 8000884:	6063      	str	r3, [r4, #4]
 8000886:	6923      	ldr	r3, [r4, #16]
 8000888:	6023      	str	r3, [r4, #0]
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	81a3      	strh	r3, [r4, #12]
 8000892:	6923      	ldr	r3, [r4, #16]
 8000894:	b94b      	cbnz	r3, 80008aa <__swsetup_r+0x9a>
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800089c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a0:	d003      	beq.n	80008aa <__swsetup_r+0x9a>
 80008a2:	4621      	mov	r1, r4
 80008a4:	4630      	mov	r0, r6
 80008a6:	f000 f9fd 	bl	8000ca4 <__smakebuf_r>
 80008aa:	89a0      	ldrh	r0, [r4, #12]
 80008ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008b0:	f010 0301 	ands.w	r3, r0, #1
 80008b4:	d00a      	beq.n	80008cc <__swsetup_r+0xbc>
 80008b6:	2300      	movs	r3, #0
 80008b8:	60a3      	str	r3, [r4, #8]
 80008ba:	6963      	ldr	r3, [r4, #20]
 80008bc:	425b      	negs	r3, r3
 80008be:	61a3      	str	r3, [r4, #24]
 80008c0:	6923      	ldr	r3, [r4, #16]
 80008c2:	b943      	cbnz	r3, 80008d6 <__swsetup_r+0xc6>
 80008c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008c8:	d1ba      	bne.n	8000840 <__swsetup_r+0x30>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	0781      	lsls	r1, r0, #30
 80008ce:	bf58      	it	pl
 80008d0:	6963      	ldrpl	r3, [r4, #20]
 80008d2:	60a3      	str	r3, [r4, #8]
 80008d4:	e7f4      	b.n	80008c0 <__swsetup_r+0xb0>
 80008d6:	2000      	movs	r0, #0
 80008d8:	e7f7      	b.n	80008ca <__swsetup_r+0xba>
 80008da:	bf00      	nop
 80008dc:	20000010 	.word	0x20000010
 80008e0:	0800113c 	.word	0x0800113c
 80008e4:	0800115c 	.word	0x0800115c
 80008e8:	0800111c 	.word	0x0800111c

080008ec <__sflush_r>:
 80008ec:	898a      	ldrh	r2, [r1, #12]
 80008ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f0:	4605      	mov	r5, r0
 80008f2:	0710      	lsls	r0, r2, #28
 80008f4:	460c      	mov	r4, r1
 80008f6:	d457      	bmi.n	80009a8 <__sflush_r+0xbc>
 80008f8:	684b      	ldr	r3, [r1, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dc04      	bgt.n	8000908 <__sflush_r+0x1c>
 80008fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000900:	2b00      	cmp	r3, #0
 8000902:	dc01      	bgt.n	8000908 <__sflush_r+0x1c>
 8000904:	2000      	movs	r0, #0
 8000906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800090a:	2e00      	cmp	r6, #0
 800090c:	d0fa      	beq.n	8000904 <__sflush_r+0x18>
 800090e:	2300      	movs	r3, #0
 8000910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000914:	682f      	ldr	r7, [r5, #0]
 8000916:	602b      	str	r3, [r5, #0]
 8000918:	d032      	beq.n	8000980 <__sflush_r+0x94>
 800091a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800091c:	89a3      	ldrh	r3, [r4, #12]
 800091e:	075a      	lsls	r2, r3, #29
 8000920:	d505      	bpl.n	800092e <__sflush_r+0x42>
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	1ac0      	subs	r0, r0, r3
 8000926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000928:	b10b      	cbz	r3, 800092e <__sflush_r+0x42>
 800092a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800092c:	1ac0      	subs	r0, r0, r3
 800092e:	2300      	movs	r3, #0
 8000930:	4602      	mov	r2, r0
 8000932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000934:	6a21      	ldr	r1, [r4, #32]
 8000936:	4628      	mov	r0, r5
 8000938:	47b0      	blx	r6
 800093a:	1c43      	adds	r3, r0, #1
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	d106      	bne.n	800094e <__sflush_r+0x62>
 8000940:	6829      	ldr	r1, [r5, #0]
 8000942:	291d      	cmp	r1, #29
 8000944:	d82c      	bhi.n	80009a0 <__sflush_r+0xb4>
 8000946:	4a29      	ldr	r2, [pc, #164]	; (80009ec <__sflush_r+0x100>)
 8000948:	40ca      	lsrs	r2, r1
 800094a:	07d6      	lsls	r6, r2, #31
 800094c:	d528      	bpl.n	80009a0 <__sflush_r+0xb4>
 800094e:	2200      	movs	r2, #0
 8000950:	6062      	str	r2, [r4, #4]
 8000952:	04d9      	lsls	r1, r3, #19
 8000954:	6922      	ldr	r2, [r4, #16]
 8000956:	6022      	str	r2, [r4, #0]
 8000958:	d504      	bpl.n	8000964 <__sflush_r+0x78>
 800095a:	1c42      	adds	r2, r0, #1
 800095c:	d101      	bne.n	8000962 <__sflush_r+0x76>
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	b903      	cbnz	r3, 8000964 <__sflush_r+0x78>
 8000962:	6560      	str	r0, [r4, #84]	; 0x54
 8000964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000966:	602f      	str	r7, [r5, #0]
 8000968:	2900      	cmp	r1, #0
 800096a:	d0cb      	beq.n	8000904 <__sflush_r+0x18>
 800096c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000970:	4299      	cmp	r1, r3
 8000972:	d002      	beq.n	800097a <__sflush_r+0x8e>
 8000974:	4628      	mov	r0, r5
 8000976:	f000 f9d5 	bl	8000d24 <_free_r>
 800097a:	2000      	movs	r0, #0
 800097c:	6360      	str	r0, [r4, #52]	; 0x34
 800097e:	e7c2      	b.n	8000906 <__sflush_r+0x1a>
 8000980:	6a21      	ldr	r1, [r4, #32]
 8000982:	2301      	movs	r3, #1
 8000984:	4628      	mov	r0, r5
 8000986:	47b0      	blx	r6
 8000988:	1c41      	adds	r1, r0, #1
 800098a:	d1c7      	bne.n	800091c <__sflush_r+0x30>
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0c4      	beq.n	800091c <__sflush_r+0x30>
 8000992:	2b1d      	cmp	r3, #29
 8000994:	d001      	beq.n	800099a <__sflush_r+0xae>
 8000996:	2b16      	cmp	r3, #22
 8000998:	d101      	bne.n	800099e <__sflush_r+0xb2>
 800099a:	602f      	str	r7, [r5, #0]
 800099c:	e7b2      	b.n	8000904 <__sflush_r+0x18>
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	81a3      	strh	r3, [r4, #12]
 80009a6:	e7ae      	b.n	8000906 <__sflush_r+0x1a>
 80009a8:	690f      	ldr	r7, [r1, #16]
 80009aa:	2f00      	cmp	r7, #0
 80009ac:	d0aa      	beq.n	8000904 <__sflush_r+0x18>
 80009ae:	0793      	lsls	r3, r2, #30
 80009b0:	680e      	ldr	r6, [r1, #0]
 80009b2:	bf08      	it	eq
 80009b4:	694b      	ldreq	r3, [r1, #20]
 80009b6:	600f      	str	r7, [r1, #0]
 80009b8:	bf18      	it	ne
 80009ba:	2300      	movne	r3, #0
 80009bc:	1bf6      	subs	r6, r6, r7
 80009be:	608b      	str	r3, [r1, #8]
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	dd9f      	ble.n	8000904 <__sflush_r+0x18>
 80009c4:	6a21      	ldr	r1, [r4, #32]
 80009c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80009ca:	4633      	mov	r3, r6
 80009cc:	463a      	mov	r2, r7
 80009ce:	4628      	mov	r0, r5
 80009d0:	47e0      	blx	ip
 80009d2:	2800      	cmp	r0, #0
 80009d4:	dc06      	bgt.n	80009e4 <__sflush_r+0xf8>
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009dc:	81a3      	strh	r3, [r4, #12]
 80009de:	f04f 30ff 	mov.w	r0, #4294967295
 80009e2:	e790      	b.n	8000906 <__sflush_r+0x1a>
 80009e4:	4407      	add	r7, r0
 80009e6:	1a36      	subs	r6, r6, r0
 80009e8:	e7ea      	b.n	80009c0 <__sflush_r+0xd4>
 80009ea:	bf00      	nop
 80009ec:	20400001 	.word	0x20400001

080009f0 <_fflush_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	690b      	ldr	r3, [r1, #16]
 80009f4:	4605      	mov	r5, r0
 80009f6:	460c      	mov	r4, r1
 80009f8:	b913      	cbnz	r3, 8000a00 <_fflush_r+0x10>
 80009fa:	2500      	movs	r5, #0
 80009fc:	4628      	mov	r0, r5
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	b118      	cbz	r0, 8000a0a <_fflush_r+0x1a>
 8000a02:	6983      	ldr	r3, [r0, #24]
 8000a04:	b90b      	cbnz	r3, 8000a0a <_fflush_r+0x1a>
 8000a06:	f000 f887 	bl	8000b18 <__sinit>
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <_fflush_r+0x6c>)
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d11b      	bne.n	8000a48 <_fflush_r+0x58>
 8000a10:	686c      	ldr	r4, [r5, #4]
 8000a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0ef      	beq.n	80009fa <_fflush_r+0xa>
 8000a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a1c:	07d0      	lsls	r0, r2, #31
 8000a1e:	d404      	bmi.n	8000a2a <_fflush_r+0x3a>
 8000a20:	0599      	lsls	r1, r3, #22
 8000a22:	d402      	bmi.n	8000a2a <_fflush_r+0x3a>
 8000a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a26:	f000 f915 	bl	8000c54 <__retarget_lock_acquire_recursive>
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	f7ff ff5d 	bl	80008ec <__sflush_r>
 8000a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a34:	07da      	lsls	r2, r3, #31
 8000a36:	4605      	mov	r5, r0
 8000a38:	d4e0      	bmi.n	80009fc <_fflush_r+0xc>
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	059b      	lsls	r3, r3, #22
 8000a3e:	d4dd      	bmi.n	80009fc <_fflush_r+0xc>
 8000a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a42:	f000 f908 	bl	8000c56 <__retarget_lock_release_recursive>
 8000a46:	e7d9      	b.n	80009fc <_fflush_r+0xc>
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_fflush_r+0x70>)
 8000a4a:	429c      	cmp	r4, r3
 8000a4c:	d101      	bne.n	8000a52 <_fflush_r+0x62>
 8000a4e:	68ac      	ldr	r4, [r5, #8]
 8000a50:	e7df      	b.n	8000a12 <_fflush_r+0x22>
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <_fflush_r+0x74>)
 8000a54:	429c      	cmp	r4, r3
 8000a56:	bf08      	it	eq
 8000a58:	68ec      	ldreq	r4, [r5, #12]
 8000a5a:	e7da      	b.n	8000a12 <_fflush_r+0x22>
 8000a5c:	0800113c 	.word	0x0800113c
 8000a60:	0800115c 	.word	0x0800115c
 8000a64:	0800111c 	.word	0x0800111c

08000a68 <std>:
 8000a68:	2300      	movs	r3, #0
 8000a6a:	b510      	push	{r4, lr}
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a76:	6083      	str	r3, [r0, #8]
 8000a78:	8181      	strh	r1, [r0, #12]
 8000a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a7c:	81c2      	strh	r2, [r0, #14]
 8000a7e:	6183      	str	r3, [r0, #24]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2208      	movs	r2, #8
 8000a84:	305c      	adds	r0, #92	; 0x5c
 8000a86:	f7ff fdf3 	bl	8000670 <memset>
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <std+0x38>)
 8000a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <std+0x3c>)
 8000a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <std+0x40>)
 8000a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <std+0x44>)
 8000a98:	6224      	str	r4, [r4, #32]
 8000a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08000f01 	.word	0x08000f01
 8000aa4:	08000f23 	.word	0x08000f23
 8000aa8:	08000f5b 	.word	0x08000f5b
 8000aac:	08000f7f 	.word	0x08000f7f

08000ab0 <_cleanup_r>:
 8000ab0:	4901      	ldr	r1, [pc, #4]	; (8000ab8 <_cleanup_r+0x8>)
 8000ab2:	f000 b8af 	b.w	8000c14 <_fwalk_reent>
 8000ab6:	bf00      	nop
 8000ab8:	080009f1 	.word	0x080009f1

08000abc <__sfmoreglue>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	2268      	movs	r2, #104	; 0x68
 8000ac0:	1e4d      	subs	r5, r1, #1
 8000ac2:	4355      	muls	r5, r2
 8000ac4:	460e      	mov	r6, r1
 8000ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000aca:	f000 f995 	bl	8000df8 <_malloc_r>
 8000ace:	4604      	mov	r4, r0
 8000ad0:	b140      	cbz	r0, 8000ae4 <__sfmoreglue+0x28>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ad8:	300c      	adds	r0, #12
 8000ada:	60a0      	str	r0, [r4, #8]
 8000adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ae0:	f7ff fdc6 	bl	8000670 <memset>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}

08000ae8 <__sfp_lock_acquire>:
 8000ae8:	4801      	ldr	r0, [pc, #4]	; (8000af0 <__sfp_lock_acquire+0x8>)
 8000aea:	f000 b8b3 	b.w	8000c54 <__retarget_lock_acquire_recursive>
 8000aee:	bf00      	nop
 8000af0:	20000099 	.word	0x20000099

08000af4 <__sfp_lock_release>:
 8000af4:	4801      	ldr	r0, [pc, #4]	; (8000afc <__sfp_lock_release+0x8>)
 8000af6:	f000 b8ae 	b.w	8000c56 <__retarget_lock_release_recursive>
 8000afa:	bf00      	nop
 8000afc:	20000099 	.word	0x20000099

08000b00 <__sinit_lock_acquire>:
 8000b00:	4801      	ldr	r0, [pc, #4]	; (8000b08 <__sinit_lock_acquire+0x8>)
 8000b02:	f000 b8a7 	b.w	8000c54 <__retarget_lock_acquire_recursive>
 8000b06:	bf00      	nop
 8000b08:	2000009a 	.word	0x2000009a

08000b0c <__sinit_lock_release>:
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <__sinit_lock_release+0x8>)
 8000b0e:	f000 b8a2 	b.w	8000c56 <__retarget_lock_release_recursive>
 8000b12:	bf00      	nop
 8000b14:	2000009a 	.word	0x2000009a

08000b18 <__sinit>:
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	f7ff fff0 	bl	8000b00 <__sinit_lock_acquire>
 8000b20:	69a3      	ldr	r3, [r4, #24]
 8000b22:	b11b      	cbz	r3, 8000b2c <__sinit+0x14>
 8000b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b28:	f7ff bff0 	b.w	8000b0c <__sinit_lock_release>
 8000b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b30:	6523      	str	r3, [r4, #80]	; 0x50
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <__sinit+0x68>)
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <__sinit+0x6c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	bf04      	itt	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	61a3      	streq	r3, [r4, #24]
 8000b42:	4620      	mov	r0, r4
 8000b44:	f000 f820 	bl	8000b88 <__sfp>
 8000b48:	6060      	str	r0, [r4, #4]
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f000 f81c 	bl	8000b88 <__sfp>
 8000b50:	60a0      	str	r0, [r4, #8]
 8000b52:	4620      	mov	r0, r4
 8000b54:	f000 f818 	bl	8000b88 <__sfp>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60e0      	str	r0, [r4, #12]
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	6860      	ldr	r0, [r4, #4]
 8000b60:	f7ff ff82 	bl	8000a68 <std>
 8000b64:	68a0      	ldr	r0, [r4, #8]
 8000b66:	2201      	movs	r2, #1
 8000b68:	2109      	movs	r1, #9
 8000b6a:	f7ff ff7d 	bl	8000a68 <std>
 8000b6e:	68e0      	ldr	r0, [r4, #12]
 8000b70:	2202      	movs	r2, #2
 8000b72:	2112      	movs	r1, #18
 8000b74:	f7ff ff78 	bl	8000a68 <std>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61a3      	str	r3, [r4, #24]
 8000b7c:	e7d2      	b.n	8000b24 <__sinit+0xc>
 8000b7e:	bf00      	nop
 8000b80:	08001118 	.word	0x08001118
 8000b84:	08000ab1 	.word	0x08000ab1

08000b88 <__sfp>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	4607      	mov	r7, r0
 8000b8c:	f7ff ffac 	bl	8000ae8 <__sfp_lock_acquire>
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <__sfp+0x84>)
 8000b92:	681e      	ldr	r6, [r3, #0]
 8000b94:	69b3      	ldr	r3, [r6, #24]
 8000b96:	b913      	cbnz	r3, 8000b9e <__sfp+0x16>
 8000b98:	4630      	mov	r0, r6
 8000b9a:	f7ff ffbd 	bl	8000b18 <__sinit>
 8000b9e:	3648      	adds	r6, #72	; 0x48
 8000ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	d503      	bpl.n	8000bb0 <__sfp+0x28>
 8000ba8:	6833      	ldr	r3, [r6, #0]
 8000baa:	b30b      	cbz	r3, 8000bf0 <__sfp+0x68>
 8000bac:	6836      	ldr	r6, [r6, #0]
 8000bae:	e7f7      	b.n	8000ba0 <__sfp+0x18>
 8000bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bb4:	b9d5      	cbnz	r5, 8000bec <__sfp+0x64>
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <__sfp+0x88>)
 8000bb8:	60e3      	str	r3, [r4, #12]
 8000bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8000bc0:	f000 f847 	bl	8000c52 <__retarget_lock_init_recursive>
 8000bc4:	f7ff ff96 	bl	8000af4 <__sfp_lock_release>
 8000bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bd0:	6025      	str	r5, [r4, #0]
 8000bd2:	61a5      	str	r5, [r4, #24]
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bdc:	f7ff fd48 	bl	8000670 <memset>
 8000be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000be8:	4620      	mov	r0, r4
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bec:	3468      	adds	r4, #104	; 0x68
 8000bee:	e7d9      	b.n	8000ba4 <__sfp+0x1c>
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	f7ff ff62 	bl	8000abc <__sfmoreglue>
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	6030      	str	r0, [r6, #0]
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1d5      	bne.n	8000bac <__sfp+0x24>
 8000c00:	f7ff ff78 	bl	8000af4 <__sfp_lock_release>
 8000c04:	230c      	movs	r3, #12
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	e7ee      	b.n	8000be8 <__sfp+0x60>
 8000c0a:	bf00      	nop
 8000c0c:	08001118 	.word	0x08001118
 8000c10:	ffff0001 	.word	0xffff0001

08000c14 <_fwalk_reent>:
 8000c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c18:	4606      	mov	r6, r0
 8000c1a:	4688      	mov	r8, r1
 8000c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c26:	f1b9 0901 	subs.w	r9, r9, #1
 8000c2a:	d505      	bpl.n	8000c38 <_fwalk_reent+0x24>
 8000c2c:	6824      	ldr	r4, [r4, #0]
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d1f7      	bne.n	8000c22 <_fwalk_reent+0xe>
 8000c32:	4638      	mov	r0, r7
 8000c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c38:	89ab      	ldrh	r3, [r5, #12]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d907      	bls.n	8000c4e <_fwalk_reent+0x3a>
 8000c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c42:	3301      	adds	r3, #1
 8000c44:	d003      	beq.n	8000c4e <_fwalk_reent+0x3a>
 8000c46:	4629      	mov	r1, r5
 8000c48:	4630      	mov	r0, r6
 8000c4a:	47c0      	blx	r8
 8000c4c:	4307      	orrs	r7, r0
 8000c4e:	3568      	adds	r5, #104	; 0x68
 8000c50:	e7e9      	b.n	8000c26 <_fwalk_reent+0x12>

08000c52 <__retarget_lock_init_recursive>:
 8000c52:	4770      	bx	lr

08000c54 <__retarget_lock_acquire_recursive>:
 8000c54:	4770      	bx	lr

08000c56 <__retarget_lock_release_recursive>:
 8000c56:	4770      	bx	lr

08000c58 <__swhatbuf_r>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	460e      	mov	r6, r1
 8000c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c60:	2900      	cmp	r1, #0
 8000c62:	b096      	sub	sp, #88	; 0x58
 8000c64:	4614      	mov	r4, r2
 8000c66:	461d      	mov	r5, r3
 8000c68:	da08      	bge.n	8000c7c <__swhatbuf_r+0x24>
 8000c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	602a      	str	r2, [r5, #0]
 8000c72:	061a      	lsls	r2, r3, #24
 8000c74:	d410      	bmi.n	8000c98 <__swhatbuf_r+0x40>
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	e00e      	b.n	8000c9a <__swhatbuf_r+0x42>
 8000c7c:	466a      	mov	r2, sp
 8000c7e:	f000 f9a5 	bl	8000fcc <_fstat_r>
 8000c82:	2800      	cmp	r0, #0
 8000c84:	dbf1      	blt.n	8000c6a <__swhatbuf_r+0x12>
 8000c86:	9a01      	ldr	r2, [sp, #4]
 8000c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c90:	425a      	negs	r2, r3
 8000c92:	415a      	adcs	r2, r3
 8000c94:	602a      	str	r2, [r5, #0]
 8000c96:	e7ee      	b.n	8000c76 <__swhatbuf_r+0x1e>
 8000c98:	2340      	movs	r3, #64	; 0x40
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	b016      	add	sp, #88	; 0x58
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ca4 <__smakebuf_r>:
 8000ca4:	898b      	ldrh	r3, [r1, #12]
 8000ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ca8:	079d      	lsls	r5, r3, #30
 8000caa:	4606      	mov	r6, r0
 8000cac:	460c      	mov	r4, r1
 8000cae:	d507      	bpl.n	8000cc0 <__smakebuf_r+0x1c>
 8000cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	6123      	str	r3, [r4, #16]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	6163      	str	r3, [r4, #20]
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	ab01      	add	r3, sp, #4
 8000cc2:	466a      	mov	r2, sp
 8000cc4:	f7ff ffc8 	bl	8000c58 <__swhatbuf_r>
 8000cc8:	9900      	ldr	r1, [sp, #0]
 8000cca:	4605      	mov	r5, r0
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f000 f893 	bl	8000df8 <_malloc_r>
 8000cd2:	b948      	cbnz	r0, 8000ce8 <__smakebuf_r+0x44>
 8000cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cd8:	059a      	lsls	r2, r3, #22
 8000cda:	d4ef      	bmi.n	8000cbc <__smakebuf_r+0x18>
 8000cdc:	f023 0303 	bic.w	r3, r3, #3
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	81a3      	strh	r3, [r4, #12]
 8000ce6:	e7e3      	b.n	8000cb0 <__smakebuf_r+0xc>
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <__smakebuf_r+0x7c>)
 8000cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cec:	89a3      	ldrh	r3, [r4, #12]
 8000cee:	6020      	str	r0, [r4, #0]
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	81a3      	strh	r3, [r4, #12]
 8000cf6:	9b00      	ldr	r3, [sp, #0]
 8000cf8:	6163      	str	r3, [r4, #20]
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	6120      	str	r0, [r4, #16]
 8000cfe:	b15b      	cbz	r3, 8000d18 <__smakebuf_r+0x74>
 8000d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d04:	4630      	mov	r0, r6
 8000d06:	f000 f973 	bl	8000ff0 <_isatty_r>
 8000d0a:	b128      	cbz	r0, 8000d18 <__smakebuf_r+0x74>
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	f023 0303 	bic.w	r3, r3, #3
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	81a3      	strh	r3, [r4, #12]
 8000d18:	89a0      	ldrh	r0, [r4, #12]
 8000d1a:	4305      	orrs	r5, r0
 8000d1c:	81a5      	strh	r5, [r4, #12]
 8000d1e:	e7cd      	b.n	8000cbc <__smakebuf_r+0x18>
 8000d20:	08000ab1 	.word	0x08000ab1

08000d24 <_free_r>:
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4605      	mov	r5, r0
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d041      	beq.n	8000db0 <_free_r+0x8c>
 8000d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d30:	1f0c      	subs	r4, r1, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bfb8      	it	lt
 8000d36:	18e4      	addlt	r4, r4, r3
 8000d38:	f000 f97c 	bl	8001034 <__malloc_lock>
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <_free_r+0x90>)
 8000d3e:	6813      	ldr	r3, [r2, #0]
 8000d40:	b933      	cbnz	r3, 8000d50 <_free_r+0x2c>
 8000d42:	6063      	str	r3, [r4, #4]
 8000d44:	6014      	str	r4, [r2, #0]
 8000d46:	4628      	mov	r0, r5
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d4c:	f000 b978 	b.w	8001040 <__malloc_unlock>
 8000d50:	42a3      	cmp	r3, r4
 8000d52:	d908      	bls.n	8000d66 <_free_r+0x42>
 8000d54:	6820      	ldr	r0, [r4, #0]
 8000d56:	1821      	adds	r1, r4, r0
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf01      	itttt	eq
 8000d5c:	6819      	ldreq	r1, [r3, #0]
 8000d5e:	685b      	ldreq	r3, [r3, #4]
 8000d60:	1809      	addeq	r1, r1, r0
 8000d62:	6021      	streq	r1, [r4, #0]
 8000d64:	e7ed      	b.n	8000d42 <_free_r+0x1e>
 8000d66:	461a      	mov	r2, r3
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	b10b      	cbz	r3, 8000d70 <_free_r+0x4c>
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d9fa      	bls.n	8000d66 <_free_r+0x42>
 8000d70:	6811      	ldr	r1, [r2, #0]
 8000d72:	1850      	adds	r0, r2, r1
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	d10b      	bne.n	8000d90 <_free_r+0x6c>
 8000d78:	6820      	ldr	r0, [r4, #0]
 8000d7a:	4401      	add	r1, r0
 8000d7c:	1850      	adds	r0, r2, r1
 8000d7e:	4283      	cmp	r3, r0
 8000d80:	6011      	str	r1, [r2, #0]
 8000d82:	d1e0      	bne.n	8000d46 <_free_r+0x22>
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	6053      	str	r3, [r2, #4]
 8000d8a:	4401      	add	r1, r0
 8000d8c:	6011      	str	r1, [r2, #0]
 8000d8e:	e7da      	b.n	8000d46 <_free_r+0x22>
 8000d90:	d902      	bls.n	8000d98 <_free_r+0x74>
 8000d92:	230c      	movs	r3, #12
 8000d94:	602b      	str	r3, [r5, #0]
 8000d96:	e7d6      	b.n	8000d46 <_free_r+0x22>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	1821      	adds	r1, r4, r0
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	bf04      	itt	eq
 8000da0:	6819      	ldreq	r1, [r3, #0]
 8000da2:	685b      	ldreq	r3, [r3, #4]
 8000da4:	6063      	str	r3, [r4, #4]
 8000da6:	bf04      	itt	eq
 8000da8:	1809      	addeq	r1, r1, r0
 8000daa:	6021      	streq	r1, [r4, #0]
 8000dac:	6054      	str	r4, [r2, #4]
 8000dae:	e7ca      	b.n	8000d46 <_free_r+0x22>
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop
 8000db4:	2000009c 	.word	0x2000009c

08000db8 <sbrk_aligned>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	4e0e      	ldr	r6, [pc, #56]	; (8000df4 <sbrk_aligned+0x3c>)
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	6831      	ldr	r1, [r6, #0]
 8000dc0:	4605      	mov	r5, r0
 8000dc2:	b911      	cbnz	r1, 8000dca <sbrk_aligned+0x12>
 8000dc4:	f000 f88c 	bl	8000ee0 <_sbrk_r>
 8000dc8:	6030      	str	r0, [r6, #0]
 8000dca:	4621      	mov	r1, r4
 8000dcc:	4628      	mov	r0, r5
 8000dce:	f000 f887 	bl	8000ee0 <_sbrk_r>
 8000dd2:	1c43      	adds	r3, r0, #1
 8000dd4:	d00a      	beq.n	8000dec <sbrk_aligned+0x34>
 8000dd6:	1cc4      	adds	r4, r0, #3
 8000dd8:	f024 0403 	bic.w	r4, r4, #3
 8000ddc:	42a0      	cmp	r0, r4
 8000dde:	d007      	beq.n	8000df0 <sbrk_aligned+0x38>
 8000de0:	1a21      	subs	r1, r4, r0
 8000de2:	4628      	mov	r0, r5
 8000de4:	f000 f87c 	bl	8000ee0 <_sbrk_r>
 8000de8:	3001      	adds	r0, #1
 8000dea:	d101      	bne.n	8000df0 <sbrk_aligned+0x38>
 8000dec:	f04f 34ff 	mov.w	r4, #4294967295
 8000df0:	4620      	mov	r0, r4
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	200000a0 	.word	0x200000a0

08000df8 <_malloc_r>:
 8000df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfc:	1ccd      	adds	r5, r1, #3
 8000dfe:	f025 0503 	bic.w	r5, r5, #3
 8000e02:	3508      	adds	r5, #8
 8000e04:	2d0c      	cmp	r5, #12
 8000e06:	bf38      	it	cc
 8000e08:	250c      	movcc	r5, #12
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	db01      	blt.n	8000e14 <_malloc_r+0x1c>
 8000e10:	42a9      	cmp	r1, r5
 8000e12:	d905      	bls.n	8000e20 <_malloc_r+0x28>
 8000e14:	230c      	movs	r3, #12
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	2600      	movs	r6, #0
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e20:	4e2e      	ldr	r6, [pc, #184]	; (8000edc <_malloc_r+0xe4>)
 8000e22:	f000 f907 	bl	8001034 <__malloc_lock>
 8000e26:	6833      	ldr	r3, [r6, #0]
 8000e28:	461c      	mov	r4, r3
 8000e2a:	bb34      	cbnz	r4, 8000e7a <_malloc_r+0x82>
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4638      	mov	r0, r7
 8000e30:	f7ff ffc2 	bl	8000db8 <sbrk_aligned>
 8000e34:	1c43      	adds	r3, r0, #1
 8000e36:	4604      	mov	r4, r0
 8000e38:	d14d      	bne.n	8000ed6 <_malloc_r+0xde>
 8000e3a:	6834      	ldr	r4, [r6, #0]
 8000e3c:	4626      	mov	r6, r4
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d140      	bne.n	8000ec4 <_malloc_r+0xcc>
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	4631      	mov	r1, r6
 8000e46:	4638      	mov	r0, r7
 8000e48:	eb04 0803 	add.w	r8, r4, r3
 8000e4c:	f000 f848 	bl	8000ee0 <_sbrk_r>
 8000e50:	4580      	cmp	r8, r0
 8000e52:	d13a      	bne.n	8000eca <_malloc_r+0xd2>
 8000e54:	6821      	ldr	r1, [r4, #0]
 8000e56:	3503      	adds	r5, #3
 8000e58:	1a6d      	subs	r5, r5, r1
 8000e5a:	f025 0503 	bic.w	r5, r5, #3
 8000e5e:	3508      	adds	r5, #8
 8000e60:	2d0c      	cmp	r5, #12
 8000e62:	bf38      	it	cc
 8000e64:	250c      	movcc	r5, #12
 8000e66:	4629      	mov	r1, r5
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f7ff ffa5 	bl	8000db8 <sbrk_aligned>
 8000e6e:	3001      	adds	r0, #1
 8000e70:	d02b      	beq.n	8000eca <_malloc_r+0xd2>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	442b      	add	r3, r5
 8000e76:	6023      	str	r3, [r4, #0]
 8000e78:	e00e      	b.n	8000e98 <_malloc_r+0xa0>
 8000e7a:	6822      	ldr	r2, [r4, #0]
 8000e7c:	1b52      	subs	r2, r2, r5
 8000e7e:	d41e      	bmi.n	8000ebe <_malloc_r+0xc6>
 8000e80:	2a0b      	cmp	r2, #11
 8000e82:	d916      	bls.n	8000eb2 <_malloc_r+0xba>
 8000e84:	1961      	adds	r1, r4, r5
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	6025      	str	r5, [r4, #0]
 8000e8a:	bf18      	it	ne
 8000e8c:	6059      	strne	r1, [r3, #4]
 8000e8e:	6863      	ldr	r3, [r4, #4]
 8000e90:	bf08      	it	eq
 8000e92:	6031      	streq	r1, [r6, #0]
 8000e94:	5162      	str	r2, [r4, r5]
 8000e96:	604b      	str	r3, [r1, #4]
 8000e98:	4638      	mov	r0, r7
 8000e9a:	f104 060b 	add.w	r6, r4, #11
 8000e9e:	f000 f8cf 	bl	8001040 <__malloc_unlock>
 8000ea2:	f026 0607 	bic.w	r6, r6, #7
 8000ea6:	1d23      	adds	r3, r4, #4
 8000ea8:	1af2      	subs	r2, r6, r3
 8000eaa:	d0b6      	beq.n	8000e1a <_malloc_r+0x22>
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	50a3      	str	r3, [r4, r2]
 8000eb0:	e7b3      	b.n	8000e1a <_malloc_r+0x22>
 8000eb2:	6862      	ldr	r2, [r4, #4]
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	bf0c      	ite	eq
 8000eb8:	6032      	streq	r2, [r6, #0]
 8000eba:	605a      	strne	r2, [r3, #4]
 8000ebc:	e7ec      	b.n	8000e98 <_malloc_r+0xa0>
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	6864      	ldr	r4, [r4, #4]
 8000ec2:	e7b2      	b.n	8000e2a <_malloc_r+0x32>
 8000ec4:	4634      	mov	r4, r6
 8000ec6:	6876      	ldr	r6, [r6, #4]
 8000ec8:	e7b9      	b.n	8000e3e <_malloc_r+0x46>
 8000eca:	230c      	movs	r3, #12
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4638      	mov	r0, r7
 8000ed0:	f000 f8b6 	bl	8001040 <__malloc_unlock>
 8000ed4:	e7a1      	b.n	8000e1a <_malloc_r+0x22>
 8000ed6:	6025      	str	r5, [r4, #0]
 8000ed8:	e7de      	b.n	8000e98 <_malloc_r+0xa0>
 8000eda:	bf00      	nop
 8000edc:	2000009c 	.word	0x2000009c

08000ee0 <_sbrk_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4d06      	ldr	r5, [pc, #24]	; (8000efc <_sbrk_r+0x1c>)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	602b      	str	r3, [r5, #0]
 8000eec:	f7ff fb36 	bl	800055c <_sbrk>
 8000ef0:	1c43      	adds	r3, r0, #1
 8000ef2:	d102      	bne.n	8000efa <_sbrk_r+0x1a>
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	b103      	cbz	r3, 8000efa <_sbrk_r+0x1a>
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	200000a4 	.word	0x200000a4

08000f00 <__sread>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	460c      	mov	r4, r1
 8000f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f08:	f000 f8a0 	bl	800104c <_read_r>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	bfab      	itete	ge
 8000f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f12:	89a3      	ldrhlt	r3, [r4, #12]
 8000f14:	181b      	addge	r3, r3, r0
 8000f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f1a:	bfac      	ite	ge
 8000f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f1e:	81a3      	strhlt	r3, [r4, #12]
 8000f20:	bd10      	pop	{r4, pc}

08000f22 <__swrite>:
 8000f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f26:	461f      	mov	r7, r3
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	4616      	mov	r6, r2
 8000f32:	d505      	bpl.n	8000f40 <__swrite+0x1e>
 8000f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f000 f868 	bl	8001010 <_lseek_r>
 8000f40:	89a3      	ldrh	r3, [r4, #12]
 8000f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4628      	mov	r0, r5
 8000f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f56:	f000 b817 	b.w	8000f88 <_write_r>

08000f5a <__sseek>:
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f62:	f000 f855 	bl	8001010 <_lseek_r>
 8000f66:	1c43      	adds	r3, r0, #1
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	bf15      	itete	ne
 8000f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f76:	81a3      	strheq	r3, [r4, #12]
 8000f78:	bf18      	it	ne
 8000f7a:	81a3      	strhne	r3, [r4, #12]
 8000f7c:	bd10      	pop	{r4, pc}

08000f7e <__sclose>:
 8000f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f82:	f000 b813 	b.w	8000fac <_close_r>
	...

08000f88 <_write_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	; (8000fa8 <_write_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff fa93 	bl	80004c2 <_write>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_write_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_write_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200000a4 	.word	0x200000a4

08000fac <_close_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d06      	ldr	r5, [pc, #24]	; (8000fc8 <_close_r+0x1c>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f7ff fa9f 	bl	80004fa <_close>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_close_r+0x1a>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_close_r+0x1a>
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	200000a4 	.word	0x200000a4

08000fcc <_fstat_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d07      	ldr	r5, [pc, #28]	; (8000fec <_fstat_r+0x20>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	f7ff fa99 	bl	8000510 <_fstat>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	d102      	bne.n	8000fe8 <_fstat_r+0x1c>
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	b103      	cbz	r3, 8000fe8 <_fstat_r+0x1c>
 8000fe6:	6023      	str	r3, [r4, #0]
 8000fe8:	bd38      	pop	{r3, r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	200000a4 	.word	0x200000a4

08000ff0 <_isatty_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d06      	ldr	r5, [pc, #24]	; (800100c <_isatty_r+0x1c>)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f7ff fa97 	bl	800052e <_isatty>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_isatty_r+0x1a>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_isatty_r+0x1a>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	200000a4 	.word	0x200000a4

08001010 <_lseek_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d07      	ldr	r5, [pc, #28]	; (8001030 <_lseek_r+0x20>)
 8001014:	4604      	mov	r4, r0
 8001016:	4608      	mov	r0, r1
 8001018:	4611      	mov	r1, r2
 800101a:	2200      	movs	r2, #0
 800101c:	602a      	str	r2, [r5, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	f7ff fa8f 	bl	8000542 <_lseek>
 8001024:	1c43      	adds	r3, r0, #1
 8001026:	d102      	bne.n	800102e <_lseek_r+0x1e>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	b103      	cbz	r3, 800102e <_lseek_r+0x1e>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	200000a4 	.word	0x200000a4

08001034 <__malloc_lock>:
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <__malloc_lock+0x8>)
 8001036:	f7ff be0d 	b.w	8000c54 <__retarget_lock_acquire_recursive>
 800103a:	bf00      	nop
 800103c:	20000098 	.word	0x20000098

08001040 <__malloc_unlock>:
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <__malloc_unlock+0x8>)
 8001042:	f7ff be08 	b.w	8000c56 <__retarget_lock_release_recursive>
 8001046:	bf00      	nop
 8001048:	20000098 	.word	0x20000098

0800104c <_read_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d07      	ldr	r5, [pc, #28]	; (800106c <_read_r+0x20>)
 8001050:	4604      	mov	r4, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	2200      	movs	r2, #0
 8001058:	602a      	str	r2, [r5, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f7ff fa14 	bl	8000488 <_read>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_read_r+0x1e>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_read_r+0x1e>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200000a4 	.word	0x200000a4

08001070 <_init>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr

0800107c <_fini>:
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	bf00      	nop
 8001080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001082:	bc08      	pop	{r3}
 8001084:	469e      	mov	lr, r3
 8001086:	4770      	bx	lr
